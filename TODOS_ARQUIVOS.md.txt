
# ======================================================================================
# INÍCIO DO ARQUIVO: .env
# ======================================================================================


# ======================================================================================
# FIM DO ARQUIVO: .env
# ======================================================================================


# ======================================================================================
# INÍCIO DO ARQUIVO: README.md
# ======================================================================================
# Firebase Studio

This is a NextJS starter in Firebase Studio.

To get started, take a look at src/app/page.tsx.

# ======================================================================================
# FIM DO ARQUIVO: README.md
# ======================================================================================


# ======================================================================================
# INÍCIO DO ARQUIVO: apphosting.yaml
# ======================================================================================
# Settings to manage and configure a Firebase App Hosting backend.
# https://firebase.google.com/docs/app-hosting/configure

runConfig:
  # Increase this value if you'd like to automatically spin up
  # more instances in response to increased traffic.
  maxInstances: 1

# ======================================================================================
# FIM DO ARQUIVO: apphosting.yaml
# ======================================================================================


# ======================================================================================
# INÍCIO DO ARQUIVO: components.json
# ======================================================================================
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "default",
  "rsc": true,
  "tsx": true,
  "tailwind": {
    "config": "tailwind.config.ts",
    "css": "src/app/globals.css",
    "baseColor": "neutral",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils",
    "ui": "@/components/ui",
    "lib": "@/lib",
    "hooks": "@/hooks"
  },
  "iconLibrary": "lucide"
}
# ======================================================================================
# FIM DO ARQUIVO: components.json
# ======================================================================================


# ======================================================================================
# INÍCIO DO ARQUIVO: next.config.ts
# ======================================================================================
import type {NextConfig} from 'next';

const nextConfig: NextConfig = {
  /* config options here */
  typescript: {
    ignoreBuildErrors: true,
  },
  eslint: {
    ignoreDuringBuilds: true,
  },
  images: {
    remotePatterns: [
      {
        protocol: 'https',
        hostname: 'placehold.co',
        port: '',
        pathname: '/**',
      },
      {
        protocol: 'https',
        hostname: 'picsum.photos',
        port: '',
        pathname: '/**',
      },
      {
        protocol: 'https',
        hostname: 'a.imagem.app',
        port: '',
        pathname: '/**',
      },
      {
        protocol: 'https',
        hostname: 'www.maxcolor.com.br',
        port: '',
        pathname: '/**',
      },
      {
        protocol: 'https',
        hostname: 'wbl.blob.core.windows.net',
        port: '',
        pathname: '/**',
      },
      {
        protocol: 'https',
        hostname: 'encrypted-tbn0.gstatic.com',
        port: '',
        pathname: '/**',
      },
      {
        protocol: 'https',
        hostname: 'www.loneiro.com.br',
        port: '',
        pathname: '/**',
      },
      {
        protocol: 'https',
        hostname: 'www.manuelitos.com.br',
        port: '',
        pathname: '/**',
      },
      {
        protocol: 'https',
        hostname: 'curvao.com.br',
        port: '',
        pathname: '/**',
      },
      {
        protocol: 'https',
        hostname: 'cdn.awsli.com.br',
        port: '',
        pathname: '/**',
      },
      {
        protocol: 'https',
        hostname: 'comunicacaoearte.com.br',
        port: '',
        pathname: '/**',
      },
      {
        protocol: 'https',
        hostname: 'www.rbrevestimentos.com.br',
        port: '',
        pathname: '/**',
      },
      {
        protocol: 'https',
        hostname: 'www.revendampg.com.br',
        port: '',
        pathname: '/**',
      },
      {
        protocol: 'https',
        hostname: 'www.novasg.com.br',
        port: '',
        pathname: '/**',
      },
      {
        protocol: 'https',
        hostname: 'www.infinityplace.com.br',
        port: '',
        pathname: '/**',
      },
    ],
  },
};

export default nextConfig;
# ======================================================================================
# FIM DO ARQUIVO: next.config.ts
# ======================================================================================


# ======================================================================================
# INÍCIO DO ARQUIVO: package.json
# ======================================================================================
{
  "name": "nextn",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev --turbopack -p 9002",
    "genkit:dev": "genkit start -- tsx src/ai/dev.ts",
    "genkit:watch": "genkit start -- tsx --watch src/ai/dev.ts",
    "build": "next build",
    "start": "next start",
    "lint": "next lint",
    "typecheck": "tsc --noEmit"
  },
  "dependencies": {
    "@genkit-ai/googleai": "^1.14.1",
    "@genkit-ai/next": "^1.14.1",
    "@hookform/resolvers": "^4.1.3",
    "@radix-ui/react-accordion": "^1.2.3",
    "@radix-ui/react-alert-dialog": "^1.1.6",
    "@radix-ui/react-avatar": "^1.1.3",
    "@radix-ui/react-checkbox": "^1.1.4",
    "@radix-ui/react-collapsible": "^1.1.11",
    "@radix-ui/react-dialog": "^1.1.6",
    "@radix-ui/react-dropdown-menu": "^2.1.6",
    "@radix-ui/react-label": "^2.1.2",
    "@radix-ui/react-menubar": "^1.1.6",
    "@radix-ui/react-popover": "^1.1.6",
    "@radix-ui/react-progress": "^1.1.2",
    "@radix-ui/react-radio-group": "^1.2.3",
    "@radix-ui/react-scroll-area": "^1.2.3",
    "@radix-ui/react-select": "^2.1.6",
    "@radix-ui/react-separator": "^1.1.2",
    "@radix-ui/react-slider": "^1.2.3",
    "@radix-ui/react-slot": "^1.2.3",
    "@radix-ui/react-switch": "^1.1.3",
    "@radix-ui/react-tabs": "^1.1.3",
    "@radix-ui/react-toast": "^1.2.6",
    "@radix-ui/react-tooltip": "^1.1.8",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "date-fns": "^3.6.0",
    "dotenv": "^16.5.0",
    "embla-carousel-autoplay": "^8.1.5",
    "embla-carousel-react": "^8.6.0",
    "firebase": "^11.9.1",
    "genkit": "^1.14.1",
    "jspdf": "^2.5.1",
    "lucide-react": "^0.475.0",
    "next": "15.3.3",
    "patch-package": "^8.0.0",
    "react": "^18.3.1",
    "react-day-picker": "^8.10.1",
    "react-dom": "^18.3.1",
    "react-hook-form": "^7.54.2",
    "recharts": "^2.15.1",
    "tailwind-merge": "^3.0.1",
    "tailwindcss-animate": "^1.0.7",
    "zod": "^3.24.2",
    "zustand": "^4.5.4"
  },
  "devDependencies": {
    "@types/node": "^20",
    "@types/react": "^18",
    "@types/react-dom": "^18",
    "genkit-cli": "^1.14.1",
    "postcss": "^8",
    "tailwindcss": "^3.4.1",
    "typescript": "^5"
  }
}
# ======================================================================================
# FIM DO ARQUIVO: package.json
# ======================================================================================


# ======================================================================================
# INÍCIO DO ARQUIVO: src/ai/dev.ts
# ======================================================================================
import { config } from 'dotenv';
config();
# ======================================================================================
# FIM DO ARQUIVO: src/ai/dev.ts
# ======================================================================================


# ======================================================================================
# INÍCIO DO ARQUIVO: src/ai/genkit.ts
# ======================================================================================
import {genkit} from 'genkit';
import {googleAI} from '@genkit-ai/googleai';
import {config} from 'dotenv';

config();

export const ai = genkit({
  plugins: [
    googleAI({
      apiKey: process.env.GEMINI_API_KEY,
    }),
  ],
  model: 'googleai/gemini-2.5-flash',
});
# ======================================================================================
# FIM DO ARQUIVO: src/ai/genkit.ts
# ======================================================================================


# ======================================================================================
# INÍCIO DO ARQUIVO: src/app/admin/new/page.tsx
# ======================================================================================
"use client";

import { useState } from 'react';
import { useRouter } from 'next/navigation';
import { useForm, useFieldArray } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import * as z from 'zod';

import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { Card, CardContent, CardHeader, CardTitle, CardFooter } from '@/components/ui/card';
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';
import { useToast } from '@/hooks/use-toast';
import { PlusCircle, Trash2, ArrowLeft } from 'lucide-react';

const productSchema = z.object({
  name: z.string().min(3, "O nome do produto é obrigatório."),
  description: z.string().min(10, "A descrição é obrigatória."),
  category: z.string().min(2, "A categoria é obrigatória."),
  imageUrl: z.string().url("URL da imagem inválida."),
  options: z.array(z.object({
    label: z.string().min(1, "O rótulo da opção é obrigatório."),
    price: z.coerce.number().min(0.01, "O preço deve ser maior que zero."),
  })).min(1, "Adicione pelo menos uma opção de preço."),
});

type ProductFormValues = z.infer<typeof productSchema>;

export default function NewProductPage() {
  const router = useRouter();
  const { toast } = useToast();
  const form = useForm<ProductFormValues>({
    resolver: zodResolver(productSchema),
    defaultValues: {
      name: '',
      description: '',
      category: '',
      imageUrl: '',
      options: [{ label: '', price: 0 }],
    },
  });

  const { fields, append, remove } = useFieldArray({
    control: form.control,
    name: "options",
  });

  const onSubmit = (data: ProductFormValues) => {
    console.log(data);
    toast({
      title: "Produto (quase) criado!",
      description: "Os dados foram validados. A integração com o banco de dados ainda será implementada.",
    });
    // Aqui você adicionaria a lógica para salvar os dados no backend
    // router.push('/admin');
  };

  return (
    <div className="container mx-auto py-10">
       <Button variant="ghost" onClick={() => router.back()} className="mb-4">
        <ArrowLeft className="mr-2 h-4 w-4" />
        Voltar
      </Button>

      <Card>
        <CardHeader>
          <CardTitle className="font-headline text-2xl text-primary">Adicionar Novo Produto</CardTitle>
        </CardHeader>
        <CardContent>
          <Form {...form}>
            <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-8">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
                <FormField
                  control={form.control}
                  name="name"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Nome do Produto</FormLabel>
                      <FormControl>
                        <Input placeholder="Ex: Cartão de Visita" {...field} />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
                <FormField
                  control={form.control}
                  name="category"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Categoria</FormLabel>
                      <FormControl>
                        <Input placeholder="Ex: Impressos" {...field} />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
              </div>

              <FormField
                control={form.control}
                name="description"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Descrição</FormLabel>
                    <FormControl>
                      <Textarea placeholder="Descreva os detalhes do produto..." {...field} />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />

              <FormField
                control={form.control}
                name="imageUrl"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>URL da Imagem</FormLabel>
                    <FormControl>
                      <Input placeholder="https://..." {...field} />
                    </FormControl>
                     <FormMessage />
                  </FormItem>
                )}
              />

              <div>
                <h3 className="text-lg font-medium mb-4">Opções de Preço e Quantidade</h3>
                <div className="space-y-4">
                  {fields.map((field, index) => (
                    <div key={field.id} className="flex items-end gap-4 p-4 border rounded-md">
                      <FormField
                        control={form.control}
                        name={`options.${index}.label`}
                        render={({ field }) => (
                           <FormItem className="flex-grow">
                            <FormLabel>Rótulo da Opção</FormLabel>
                            <FormControl>
                              <Input placeholder="Ex: 100 unidades" {...field} />
                            </FormControl>
                            <FormMessage />
                          </FormItem>
                        )}
                      />
                      <FormField
                        control={form.control}
                        name={`options.${index}.price`}
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel>Preço (R$)</FormLabel>
                            <FormControl>
                              <Input type="number" step="0.01" {...field} />
                            </FormControl>
                             <FormMessage />
                          </FormItem>
                        )}
                      />
                      <Button type="button" variant="destructive" size="icon" onClick={() => remove(index)}>
                        <Trash2 className="h-4 w-4" />
                      </Button>
                    </div>
                  ))}
                </div>
                 <Button
                    type="button"
                    variant="outline"
                    size="sm"
                    className="mt-4"
                    onClick={() => append({ label: '', price: 0 })}
                  >
                   <PlusCircle className="mr-2 h-4 w-4" />
                    Adicionar Opção
                </Button>
              </div>
              <CardFooter className="px-0 pt-6">
                <Button type="submit">Salvar Produto</Button>
              </CardFooter>
            </form>
          </Form>
        </CardContent>
      </Card>
    </div>
  );
}
# ======================================================================================
# FIM DO ARQUIVO: src/app/admin/new/page.tsx
# ======================================================================================


# ======================================================================================
# INÍCIO DO ARQUIVO: src/app/admin/page.tsx
# ======================================================================================
import { products } from '@/lib/products';
import {
  Table,
  TableHeader,
  TableRow,
  TableHead,
  TableBody,
  TableCell,
} from '@/components/ui/table';
import { Button } from '@/components/ui/button';
import Link from 'next/link';
import { PlusCircle, Edit } from 'lucide-react';

export default function AdminPage() {
  return (
    <div className="container mx-auto py-10">
      <div className="flex justify-between items-center mb-8">
        <h1 className="text-4xl font-headline text-primary">
          Painel Administrativo
        </h1>
        <Button asChild>
          <Link href="/admin/new">
            <PlusCircle className="mr-2 h-5 w-5" />
            Adicionar Novo Produto
          </Link>
        </Button>
      </div>

      <div className="bg-card p-6 rounded-lg shadow-lg">
        <h2 className="text-2xl font-semibold mb-4">Produtos</h2>
        <div className="border rounded-lg">
          <Table>
            <TableHeader>
              <TableRow>
                <TableHead>Nome</TableHead>
                <TableHead>Categoria</TableHead>
                <TableHead>Preço Base</TableHead>
                <TableHead className="text-right">Ações</TableHead>
              </TableRow>
            </TableHeader>
            <TableBody>
              {products.map((product) => (
                <TableRow key={product.id}>
                  <TableCell className="font-medium">{product.name}</TableCell>
                  <TableCell>{product.category}</TableCell>
                  <TableCell>
                    {product.options
                      ? `R$ ${product.options[0].price.toFixed(2)}`
                      : 'Customizável'}
                  </TableCell>
                  <TableCell className="text-right">
                    <Button variant="outline" size="sm">
                       <Edit className="mr-2 h-4 w-4" />
                       Editar
                    </Button>
                  </TableCell>
                </TableRow>
              ))}
            </TableBody>
          </Table>
        </div>
        <p className="text-sm text-muted-foreground mt-4">
          * A funcionalidade de edição e adição de produtos ainda não está conectada a um banco de dados. As alterações não serão salvas permanentemente.
        </p>
      </div>
    </div>
  );
}
# ======================================================================================
# FIM DO ARQUIVO: src/app/admin/page.tsx
# ======================================================================================


# ======================================================================================
# INÍCIO DO ARQUIVO: src/app/globals.css
# ======================================================================================
@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  :root {
    --background: 240 10% 3.9%;
    --foreground: 0 0% 98%;
    --card: 240 4% 10%;
    --card-foreground: 0 0% 98%;
    --popover: 240 4% 10%;
    --popover-foreground: 0 0% 98%;
    --primary: 195 85% 45%;
    --primary-foreground: 210 20% 98%;
    --secondary: 240 3.7% 15.9%;
    --secondary-foreground: 0 0% 98%;
    --muted: 240 3.7% 15.9%;
    --muted-foreground: 0 0% 63.9%;
    --accent: 51 100% 50%;
    --accent-foreground: 240 10% 3.9%;
    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 0 0% 98%;
    --border: 240 3.7% 15.9%;
    --input: 240 3.7% 15.9%;
    --ring: 195 85% 45%;
    --radius: 0.5rem;
    --chart-1: 12 76% 61%;
    --chart-2: 173 58% 39%;
    --chart-3: 197 37% 24%;
    --chart-4: 43 74% 66%;
    --chart-5: 27 87% 67%;
  }

  .dark {
    --background: 240 10% 3.9%;
    --foreground: 0 0% 98%;
    --card: 240 4% 10%;
    --card-foreground: 0 0% 98%;
    --popover: 240 4% 10%;
    --popover-foreground: 0 0% 98%;
    --primary: 195 85% 45%;
    --primary-foreground: 210 20% 98%;
    --secondary: 240 3.7% 15.9%;
    --secondary-foreground: 0 0% 98%;
    --muted: 240 3.7% 15.9%;
    --muted-foreground: 0 0% 63.9%;
    --accent: 51 100% 50%;
    --accent-foreground: 240 10% 3.9%;
    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 0 0% 98%;
    --border: 240 3.7% 15.9%;
    --input: 240 3.7% 15.9%;
    --ring: 195 85% 45%;
  }
}

@layer base {
  * {
    @apply border-border;
  }
  body {
    @apply bg-background text-foreground;
  }
}
# ======================================================================================
# FIM DO ARQUIVO: src/app/globals.css
# ======================================================================================


# ======================================================================================
# INÍCIO DO ARQUIVO: src/app/layout.tsx
# ======================================================================================
import type { Metadata } from 'next';
import './globals.css';
import { Header } from '@/components/layout/header';
import { Footer } from '@/components/layout/footer';
import { Toaster } from "@/components/ui/toaster";
import { CartSheet } from '@/components/cart-sheet';

export const metadata: Metadata = {
  title: 'Vidal Design Solutions',
  description: 'Qualidade e Inovação em Comunicação Visual.',
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="pt-br" className="scroll-smooth dark">
      <head>
        <link rel="preconnect" href="https://fonts.googleapis.com" />
        <link rel="preconnect" href="https://fonts.gstatic.com" crossOrigin="anonymous" />
        <link href="https://fonts.googleapis.com/css2?family=Playfair+Display:wght@700;900&family=PT+Sans:wght@400;700&display=swap" rel="stylesheet" />
      </head>
      <body className="font-body antialiased">
        <div className="flex flex-col min-h-screen">
          <Header />
          <main className="flex-grow container mx-auto px-4 sm:px-6 lg:px-8">
            {children}
          </main>
          <Footer />
        </div>
        <CartSheet />
        <Toaster />
      </body>
    </html>
  );
}
# ======================================================================================
# FIM DO ARQUIVO: src/app/layout.tsx
# ======================================================================================


# ======================================================================================
# INÍCIO DO ARQUIVO: src/app/page.tsx
# ======================================================================================
"use client";

import { useMemo, useRef } from 'react';
import { products as allProducts } from '@/lib/products';
import { useAppStore } from '@/hooks/use-app-store';
import { ProductCard } from '@/components/product-card';
import { AnyProduct } from '@/lib/types';
import { Button } from '@/components/ui/button';
import Image from 'next/image';
import { Card } from '@/components/ui/card';
import { Carousel, CarouselContent, CarouselItem, CarouselNext, CarouselPrevious } from '@/components/ui/carousel';
import Autoplay from "embla-carousel-autoplay";


export default function Home() {
  const searchTerm = useAppStore((state) => state.searchTerm);
  const plugin = useRef(
    Autoplay({ delay: 4000, stopOnInteraction: true })
  );

  const filteredProducts = useMemo(() => {
    if (!searchTerm) return allProducts;
    return allProducts.filter(p => 
      p.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
      p.category.toLowerCase().includes(searchTerm.toLowerCase()) ||
      p.description.toLowerCase().includes(searchTerm.toLowerCase())
    );
  }, [searchTerm]);

  const categories = useMemo(() => {
    const categorySet = new Set(filteredProducts.map(p => p.category));
    return Array.from(categorySet);
  }, [filteredProducts]);

  return (
    <div className="py-6 sm:py-10">
      <section id="home" className="mb-16">
        <Carousel 
          className="w-full" 
          opts={{ loop: true }}
          plugins={[plugin.current]}
          onMouseEnter={plugin.current.stop}
          onMouseLeave={plugin.current.reset}
        >
          <CarouselContent>
            <CarouselItem>
              <div 
                className="relative p-12 md:p-20 rounded-2xl shadow-lg overflow-hidden bg-cover bg-center h-[400px] flex flex-col justify-center text-center"
                style={{ backgroundImage: "url('https://www.novasg.com.br/images/palavras-chave/grafica-qualidade.jpg')" }}
              >
                  <div className="absolute inset-0 bg-black/70"></div>
                  <div className="relative z-10">
                       <h1 className="font-headline text-4xl md:text-6xl font-bold text-primary mb-4">
                          Vidal Design Solutions
                      </h1>
                      <p className="max-w-3xl mx-auto text-lg md:text-xl text-foreground/80 mb-8">
                          Qualidade e Inovação em Comunicação Visual. Transformamos suas ideias em realidade com design de ponta e materiais de alta qualidade.
                      </p>
                       <a href="#products">
                          <Button size="lg" className="bg-accent text-accent-foreground hover:bg-accent/90">
                              Ver Produtos
                          </Button>
                      </a>
                  </div>
              </div>
            </CarouselItem>
            <CarouselItem>
                <div className="rounded-2xl shadow-lg overflow-hidden h-[400px] relative">
                    <Image 
                        src="https://a.imagem.app/BrQUlv.jpeg" 
                        alt="Banner Vidal Design Solutions" 
                        fill
                        className="w-full h-full object-cover"
                        data-ai-hint="company banner"
                    />
                </div>
            </CarouselItem>
          </CarouselContent>
          <CarouselPrevious className="hidden sm:flex" />
          <CarouselNext className="hidden sm:flex" />
        </Carousel>
      </section>

      <section id="products" className="mt-16">
        <h2 className="font-headline text-3xl md:text-5xl text-center text-primary mb-12">Nossos Produtos</h2>
        {categories.length > 0 ? (
          categories.map(category => (
            <div key={category} id={category.toLowerCase().replace(/\s/g, '-')} className="mb-16">
              <h3 className="font-headline text-2xl md:text-3xl text-primary border-b-2 border-accent pb-3 mb-8">
                {category}
              </h3>
              <div className="grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-8">
                {filteredProducts
                  .filter(p => p.category === category)
                  .map(product => (
                    <ProductCard key={product.id} product={product as AnyProduct} />
                  ))}
              </div>
            </div>
          ))
        ) : (
          <p className="text-center text-lg text-foreground/70">Nenhum produto encontrado para "{searchTerm}". Tente uma busca diferente.</p>
        )}
      </section>
    </div>
  );
}
# ======================================================================================
# FIM DO ARQUIVO: src/app/page.tsx
# ======================================================================================


# ======================================================================================
# INÍCIO DO ARQUIVO: src/components/cart-sheet.tsx
# ======================================================================================
"use client"

import { useState } from "react";
import { jsPDF } from "jspdf";
import { useAppStore } from "@/hooks/use-app-store";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Sheet, SheetContent, SheetHeader, SheetTitle, SheetFooter, SheetClose } from "@/components/ui/sheet";
import { Separator } from "@/components/ui/separator";
import { ScrollArea } from "@/components/ui/scroll-area";
import Image from "next/image";
import { Trash2, Minus, Plus, ShoppingCart, ArrowLeft, FileText, Send } from "lucide-react";

type View = 'cart' | 'form';

export function CartSheet() {
  const { isCartOpen, toggleCart, cart, updateQuantity, removeFromCart, clearCart } = useAppStore();
  const [view, setView] = useState<View>('cart');
  const [actionType, setActionType] = useState<'pdf' | 'whatsapp' | null>(null);
  const [customerName, setCustomerName] = useState('');
  const [customerContact, setCustomerContact] = useState('');

  const total = cart.reduce((acc, item) => acc + item.price * item.quantity, 0);
  const formatCurrency = (value: number) => `R$ ${value.toFixed(2).replace('.', ',')}`;

  const handleAction = (type: 'pdf' | 'whatsapp') => {
    setActionType(type);
    setView('form');
  };

  const generateOrderSummary = () => {
    let summary = `*DADOS DO CLIENTE:*\nNome: ${customerName}\nContato: ${customerContact}\n\n*PEDIDO:*\n\n`;
    cart.forEach(item => {
        summary += `*Produto:* ${item.name}\n`;
        summary += `*Detalhes:* ${item.description}\n`;
        summary += `*Quantidade:* ${item.quantity}\n`;
        summary += `*Subtotal:* ${formatCurrency(item.price * item.quantity)}\n\n`;
    });
    summary += `*TOTAL DO PEDIDO: ${formatCurrency(total)}*`;
    return summary;
  };

  const handleFinalize = () => {
    if (!customerName || !customerContact) {
      alert("Por favor, preencha todos os campos.");
      return;
    }

    const summary = generateOrderSummary();

    if (actionType === 'whatsapp') {
      const phoneNumber = '5511968649673'; // Replace with your number
      const encodedMessage = encodeURIComponent(summary);
      window.open(`https://api.whatsapp.com/send?phone=${phoneNumber}&text=${encodedMessage}`, '_blank');
    }

    if (actionType === 'pdf') {
      const doc = new jsPDF();
      doc.setFontSize(18);
      doc.text("Orçamento de Pedido - Vidal Design", 15, 20);
      doc.setFontSize(12);
      const summaryLines = doc.splitTextToSize(summary.replace(/\*/g, ''), 180);
      doc.text(summaryLines, 15, 35);
      doc.save(`Pedido-${customerName.replace(/\s/g, '_')}.pdf`);
    }

    resetStateAndClose();
    clearCart();
  };

  const handleOpenChange = (open: boolean) => {
    if (!open) {
      setView('cart'); // Reset view when closing
    }
    toggleCart();
  };

  const resetStateAndClose = () => {
    setView('cart');
    setCustomerName('');
    setCustomerContact('');
    setActionType(null);
    handleOpenChange(false);
  }

  return (
    <Sheet open={isCartOpen} onOpenChange={handleOpenChange}>
      <SheetContent className="flex flex-col sm:max-w-lg">
        <SheetHeader>
          <SheetTitle className="flex items-center gap-2 font-headline text-2xl text-primary">
            {view === 'form' && (
              <Button variant="ghost" size="icon" onClick={() => setView('cart')} className="mr-2">
                <ArrowLeft className="h-5 w-5" />
              </Button>
            )}
            {view === 'cart' ? 'Carrinho de Compras' : 'Informações para o Pedido'}
          </SheetTitle>
        </SheetHeader>
        
        {view === 'cart' ? (
          <>
            <ScrollArea className="flex-grow my-4 pr-4">
              {cart.length > 0 ? (
                <div className="space-y-4">
                  {cart.map(item => (
                    <div key={item.id} className="flex gap-4">
                      {item.imageUrl && (
                        <Image src={item.imageUrl} alt={item.name} width={80} height={80} className="rounded-md object-cover" data-ai-hint="product photo" />
                      )}
                      <div className="flex-grow">
                        <h4 className="font-semibold">{item.name}</h4>
                        <p className="text-sm text-muted-foreground">{item.description}</p>
                        <p className="font-bold text-primary">{formatCurrency(item.price * item.quantity)}</p>
                        <div className="flex items-center gap-2 mt-2">
                          {!item.isCustom ? (
                            <>
                              <Button variant="outline" size="icon" className="h-7 w-7" onClick={() => updateQuantity(item.id, item.quantity - 1)}>
                                <Minus className="h-4 w-4" />
                              </Button>
                              <span>{item.quantity}</span>
                              <Button variant="outline" size="icon" className="h-7 w-7" onClick={() => updateQuantity(item.id, item.quantity + 1)}>
                                <Plus className="h-4 w-4" />
                              </Button>
                            </>
                          ) : (
                            <span className="text-sm">Qtd: {item.quantity}</span>
                          )}
                          <Button variant="ghost" size="icon" className="text-destructive hover:text-destructive ml-auto" onClick={() => removeFromCart(item.id)}>
                            <Trash2 className="h-4 w-4" />
                          </Button>
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
              ) : (
                <div className="flex flex-col items-center justify-center h-full text-center">
                  <ShoppingCart className="h-16 w-16 text-muted-foreground mb-4" />
                  <p className="text-lg font-semibold">Seu carrinho está vazio</p>
                  <p className="text-muted-foreground">Adicione produtos para vê-los aqui.</p>
                </div>
              )}
            </ScrollArea>
            {cart.length > 0 && (
              <SheetFooter className="flex-col gap-4 !space-x-0">
                <Separator />
                <div className="flex justify-between items-center font-bold text-lg">
                  <span>Total:</span>
                  <span>{formatCurrency(total)}</span>
                </div>
                <div className="grid grid-cols-2 gap-4">
                  <Button variant="outline" onClick={() => handleAction('pdf')}><FileText className="mr-2 h-4 w-4" /> Gerar PDF</Button>
                  <Button onClick={() => handleAction('whatsapp')} className="bg-[#25D366] hover:bg-[#128C7E] text-white"><Send className="mr-2 h-4 w-4" /> Enviar WhatsApp</Button>
                </div>
              </SheetFooter>
            )}
          </>
        ) : (
          <div className="flex-grow flex flex-col justify-between py-4">
            <div className="space-y-4">
              <div>
                <label htmlFor="customer-name" className="text-sm font-medium">Seu Nome Completo</label>
                <Input id="customer-name" value={customerName} onChange={e => setCustomerName(e.target.value)} placeholder="Nome Sobrenome" />
              </div>
              <div>
                <label htmlFor="customer-contact" className="text-sm font-medium">Seu Contato (WhatsApp/Email)</label>
                <Input id="customer-contact" value={customerContact} onChange={e => setCustomerContact(e.target.value)} placeholder="(XX) XXXXX-XXXX" />
              </div>
            </div>
             <SheetFooter className="!space-x-0">
                 <Button onClick={handleFinalize} className="w-full">
                    {actionType === 'pdf' ? <FileText className="mr-2 h-4 w-4" /> : <Send className="mr-2 h-4 w-4" />}
                    Finalizar Pedido
                  </Button>
             </SheetFooter>
          </div>
        )}
      </SheetContent>
    </Sheet>
  );
}
# ======================================================================================
# FIM DO ARQUIVO: src/components/cart-sheet.tsx
# ======================================================================================


# ======================================================================================
# INÍCIO DO ARQUIVO: src/components/layout/footer.tsx
# ======================================================================================
import { Facebook, Instagram, Image as ImageIcon } from "lucide-react";

const SocialIcon = ({ href, title, children }: { href: string, title: string, children: React.ReactNode }) => (
    <a href={href} target="_blank" rel="noopener noreferrer" title={title} className="text-gray-400 hover:text-accent transition-colors">
        {children}
    </a>
);

export function Footer() {
    return (
        <footer className="bg-card border-t-4 border-accent mt-12">
            <div className="container mx-auto px-4 sm:px-6 lg:px-8 py-10">
                <div className="grid grid-cols-1 md:grid-cols-5 gap-8 text-center md:text-left">
                    <div className="md:col-span-1">
                        <div className="flex justify-center md:justify-start mb-4">
                            <img src="https://a.imagem.app/BrIN0X.png" alt="Vidal Design Solutions Logo" style={{ width: '170px', height: 'auto' }} />
                        </div>
                        <p className="text-sm text-muted-foreground">Qualidade e Inovação em Comunicação Visual.</p>
                    </div>
                    <div>
                        <h4 className="font-headline text-lg text-primary mb-2">Contato</h4>
                        <p className="text-sm"><a href="tel:+5511968649673" className="text-foreground hover:text-accent">11 96864-9673</a></p>
                        <p className="text-sm"><a href="tel:+5511949141803" className="text-foreground hover:text-accent">11 94914-1803</a></p>
                    </div>
                    <div>
                        <h4 className="font-headline text-lg text-primary mb-2">Endereço</h4>
                        <a href="https://maps.google.com/?q=Rua Antonio Cordeiro, 57, Mogi das Cruzes - SP" target="_blank" rel="noopener noreferrer" className="text-sm text-foreground hover:text-accent">
                            <p>Rua Antonio Cordeiro, 57</p>
                            <p>Mogi das Cruzes - SP</p>
                        </a>
                    </div>
                    <div>
                        <h4 className="font-headline text-lg text-primary mb-2">Portfólio</h4>
                         <a href="https://photos.app.goo.gl/HiRZfa4eNnUpwyca7" target="_blank" rel="noopener noreferrer" className="text-sm text-foreground hover:text-accent flex items-center justify-center md:justify-start gap-2">
                           <ImageIcon className="w-5 h-5"/>
                           <span>Ver Nossos Trabalhos</span>
                        </a>
                    </div>
                    <div>
                        <h4 className="font-headline text-lg text-primary mb-2">Redes Sociais</h4>
                        <div className="flex justify-center md:justify-start gap-4">
                           <SocialIcon href="https://www.facebook.com/share/1BqrEs4rEr/" title="Facebook">
                                <svg className="w-7 h-7" fill="currentColor" viewBox="0 0 24 24"><path d="M9 8h-3v4h3v12h5v-12h3.642l.358-4h-4v-1.667c0-.955.192-1.333 1.115-1.333h2.885v-5h-3.808c-3.596 0-5.192 1.583-5.192 4.615v3.385z"/></svg>
                            </SocialIcon>
                            <SocialIcon href="https://www.instagram.com/vidaldesignsolutions?igsh=MTYxbTgxazY5ZzI1OQ==" title="Instagram">
                                <svg className="w-7 h-7" fill="currentColor" viewBox="0 0 24 24"><path d="M12 2.163c3.204 0 3.584.012 4.85.07 3.252.148 4.771 1.691 4.919 4.919.058 1.265.069 1.645.069 4.85s-.011 3.584-.069 4.85c-.149 3.225-1.664 4.771-4.919 4.919-1.266.058-1.644.07-4.85.07s-3.584-.012-4.85-.07c-3.252-.148-4.771-1.691-4.919-4.919-.058-1.265-.069-1.645-.069-4.85s.011-3.584.069-4.85c.149-3.225 1.664-4.771 4.919-4.919 1.266-.057 1.644-.07 4.85-.07zm0-2.163c-3.259 0-3.667.014-4.947.072-4.358.2-6.78 2.618-6.98 6.98-.059 1.281-.073 1.689-.073 4.948s.014 3.667.072 4.947c.2 4.358 2.618 6.78 6.98 6.98 1.281.058 1.689.072 4.948.072s3.667-.014 4.947-.072c4.358-.2 6.78-2.618 6.98-6.98.059-1.281.073-1.689.073-4.948s-.014-3.667-.072-4.947c-.2-4.358-2.618-6.78-6.98-6.98-1.281-.059-1.689-.073-4.948-.073zm0 5.838c-3.403 0-6.162 2.759-6.162 6.162s2.759 6.162 6.162 6.162 6.162-2.759 6.162-6.162-2.759-6.162-6.162-6.162zm0 10.162c-2.209 0-4-1.79-4-4s1.791-4 4-4 4 1.79 4 4-1.791 4-4 4zm6.406-11.845c-.796 0-1.441.645-1.441 1.44s.645 1.441 1.441 1.441 1.441-.645 1.441-1.441-.645-1.44-1.441-1.44z"/></svg>
                            </SocialIcon>
                        </div>
                    </div>
                </div>
                <div className="text-center text-muted-foreground text-sm mt-8 pt-6 border-t border-border">
                    &copy; {new Date().getFullYear()} Vidal Design Solutions. Todos os direitos reservados.
                </div>
            </div>
        </footer>
    );
}
# ======================================================================================
# FIM DO ARQUIVO: src/components/layout/footer.tsx
# ======================================================================================


# ======================================================================================
# INÍCIO DO ARQUIVO: src/components/layout/header.tsx
# ======================================================================================
"use client";

import Link from "next/link";
import { Search, ShoppingCart } from "lucide-react";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { useAppStore } from "@/hooks/use-app-store";
import { useEffect, useState } from "react";

export function Header() {
  const { cart, toggleCart, setSearchTerm } = useAppStore();
  const [totalItems, setTotalItems] = useState(0);

  useEffect(() => {
    setTotalItems(cart.reduce((sum, item) => sum + item.quantity, 0));
  }, [cart]);

  const navLinks = [
    { name: "Impressos", href: "#impressos" },
    { name: "Adesivos", href: "#adesivos-e-rótulos" },
    { name: "Banners", href: "#banners-e-faixas" },
    { name: "Toldos", href: "#toldos" },
    { name: "Camisetas", href: "#camisetas" },
  ];

  return (
    <header className="sticky top-0 z-40 bg-background/80 backdrop-blur-sm border-b">
      <div className="container mx-auto px-4 sm:px-6 lg:px-8 py-4">
        <div className="flex justify-between items-center flex-wrap gap-4">
          <Link href="/" className="flex-shrink-0">
             <img src="https://a.imagem.app/BrIN0X.png" alt="Vidal Design Solutions Logo" style={{ width: '250px', height: 'auto' }} />
          </Link>

          <nav className="hidden lg:flex items-center gap-6">
            {navLinks.map((link) => (
              <a key={link.name} href={link.href} className="text-sm font-medium text-foreground/80 hover:text-primary transition-colors">
                {link.name}
              </a>
            ))}
          </nav>

          <div className="flex items-center gap-2 sm:gap-4">
            <div className="relative">
              <Search className="absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-muted-foreground" />
              <Input
                type="search"
                placeholder="Buscar produtos..."
                className="pl-9 w-32 sm:w-48 md:w-64"
                onChange={(e) => setSearchTerm(e.target.value)}
              />
            </div>
            <Button variant="ghost" size="icon" onClick={toggleCart} className="relative">
              <ShoppingCart className="h-6 w-6" />
              {totalItems > 0 && (
                <span className="absolute -top-1 -right-1 bg-accent text-accent-foreground text-xs font-bold rounded-full h-5 w-5 flex items-center justify-center border-2 border-background">
                  {totalItems}
                </span>
              )}
              <span className="sr-only">Abrir carrinho</span>
            </Button>
          </div>
        </div>
      </div>
    </header>
  );
}
# ======================================================================================
# FIM DO ARQUIVO: src/components/layout/header.tsx
# ======================================================================================


# ======================================================================================
# INÍCIO DO ARQUIVO: src/components/product-card.tsx
# ======================================================================================
"use client"

import Image from "next/image"
import { useState, useMemo, useEffect } from "react"
import { AnyProduct, Product, CustomProduct, ProductOption } from "@/lib/types"
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { useAppStore } from "@/hooks/use-app-store"
import { useToast } from "@/hooks/use-toast"
import { ShoppingCart } from "lucide-react"

export function ProductCard({ product }: { product: AnyProduct }) {
    const { toast } = useToast();
    const addToCart = useAppStore(state => state.addToCart);

    const isCustom = 'customization' in product && product.customization !== undefined;
    const hasOptions = 'options' in product && product.options !== undefined && product.options.length > 0;

    // State for standard products
    const [selectedOption, setSelectedOption] = useState<ProductOption | null>(hasOptions ? (product as Product).options[0] : null);
    const [selectedSize, setSelectedSize] = useState((product as Product).details?.finish?.split(', ')[0] || "M");

    // State for custom products
    const [customValues, setCustomValues] = useState<Record<string, string | number>>({});
    
    useEffect(() => {
        if (isCustom) {
            if ((product as CustomProduct).customization.type === 'quantity' || (hasOptions && (product as CustomProduct).customization)) {
                setCustomValues(prev => ({...prev, quantity: 1}));
            }
        }
    }, [isCustom, hasOptions, product.id, product.customization]);

    const handleCustomChange = (name: string, value: string | number) => {
        setCustomValues(prev => ({ ...prev, [name]: value }));
    };

    const price = useMemo(() => {
        if (isCustom) {
            const p = product as CustomProduct;
            
            if (hasOptions && p.customization.type === 'quantity') {
                return selectedOption?.price ?? 0;
            }

            const { type, fields, pricePerM2, pricePerUnit } = p.customization;
            let calculatedPrice = 0;
            const width = Number(customValues.width) || 0;
            const height = Number(customValues.height) || 0;
            const quantity = Number(customValues.quantity) || 0;
            
            if (type === 'area') {
                if (height > 0 && width > 0 && quantity > 0) {
                    const area = (height/100) * (width/100);
                    const totalArea = area * quantity;
                    const finalPrice = Math.max(totalArea, 0.5) * (pricePerM2 || 0); 
                    calculatedPrice = finalPrice / quantity;
                }
            } else if (type === 'linear-retratil') {
                const projection = Number(customValues.projection) || 0;
                if (width > 0 && projection > 0) {
                    const pricePerLinearM = projection <= 150 ? 300 : 350;
                    calculatedPrice = (width / 100) * pricePerLinearM;
                }
            } else if (type === 'linear-cortina') {
                 if (width > 0 && height > 0) {
                    const pricePerLinearM = height <= 200 ? 300 : 350;
                    calculatedPrice = (width / 100) * pricePerLinearM;
                }
            } else if (type === 'quantity') {
                if (pricePerUnit && quantity > 0) {
                    calculatedPrice = pricePerUnit;
                } else if (pricePerUnit) {
                    calculatedPrice = pricePerUnit; 
                }
            }
            return calculatedPrice > 0 ? calculatedPrice : null;
        }
        return selectedOption?.price ?? 0;
    }, [isCustom, hasOptions, product, selectedOption, customValues]);
    
    const formatCurrency = (value: number) => `R$ ${value.toFixed(2).replace('.', ',')}`;

    const handleAddToCart = () => {
        let cartItem;
        if (isCustom) {
            const p = product as CustomProduct;
            let quantity = 1;

            if (p.customization.type === 'quantity' && hasOptions) {
                 if (!selectedOption) {
                    toast({ variant: "destructive", title: "Erro", description: "Por favor, selecione uma opção." });
                    return;
                }
                quantity = Number(customValues.quantity) || 1;
                if (quantity <= 0) {
                    toast({ variant: "destructive", title: "Erro", description: "A quantidade deve ser maior que zero." });
                    return;
                }
            } else {
                 if (!price) {
                    toast({ variant: "destructive", title: "Erro", description: "Por favor, preencha todas as medidas para calcular o preço." });
                    return;
                }
            }
            
            quantity = Number(customValues.quantity) || 1;
            let descriptionParts: string[] = [];
            
            if(hasOptions && selectedOption) {
                 descriptionParts.push(selectedOption.label);
            }

            Object.entries(customValues).map(([key, value]) => {
                const field = (product as CustomProduct).customization.fields.find(f => f.name === key);
                if (field) {
                    if (key === 'quantity' && (product as CustomProduct).customization.type === 'quantity') {
                        // Handled later
                    } else if(key !== 'quantity') {
                        const unit = (key === 'width' || key === 'height' || key === 'projection') ? 'cm' : '';
                        descriptionParts.push(`${field?.label}: ${value}${unit}`);
                    }
                }
            });

            if ((product as CustomProduct).customization.type === 'quantity' && !('quantity' in customValues)) {
                 descriptionParts.unshift(`Qtd: ${quantity}`);
            }
            
            const finalDescription = descriptionParts.length > 0 ? descriptionParts.join(' | ') : product.description;

            cartItem = {
                id: `${product.id}-${selectedOption?.label || ''}-${Date.now()}`,
                name: product.name,
                price: price || 0,
                quantity: quantity,
                description: finalDescription,
                imageUrl: product.imageUrl,
                isCustom: true,
            };

        } else {
            const p = product as Product;
            let description = selectedOption!.label;
            let id = `${p.id}-${selectedOption!.label}`;
            if (p.details?.finish) {
                description += ` - Tam: ${selectedSize}`;
                id += `-${selectedSize}`;
            }

            cartItem = {
                id, name: p.name, price: selectedOption!.price,
                quantity: 1, description, imageUrl: p.imageUrl, isCustom: false
            };
        }
        
        addToCart(cartItem);
        toast({ title: "Produto adicionado!", description: `${product.name} foi adicionado ao seu carrinho.` });
    };

    const customFields = isCustom ? (product as CustomProduct).customization.fields : [];
    const showQuantityForCustomWithOptions = isCustom && hasOptions && (product as CustomProduct).customization.type === 'quantity';

    return (
        <Card className="flex flex-col overflow-hidden shadow-md transition-transform duration-300 hover:scale-[1.02] hover:shadow-xl">
            {product.imageUrl && (
                 <div className="aspect-video overflow-hidden">
                    <Image src={product.imageUrl} alt={product.name} width={600} height={400} className="object-cover w-full h-full" data-ai-hint={product.aiHint || "product image"}/>
                </div>
            )}
            <CardHeader>
                <CardTitle className="font-headline text-xl text-primary">{product.name}</CardTitle>
                <CardDescription>{product.description}</CardDescription>
            </CardHeader>
            <CardContent className="flex-grow space-y-4">
                 {hasOptions && !isCustom && (product as Product).details?.finish && (
                     <div>
                        <Label>Tamanho</Label>
                        <Select onValueChange={setSelectedSize} defaultValue={selectedSize}>
                            <SelectTrigger><SelectValue /></SelectTrigger>
                            <SelectContent>
                                {(product as Product).details!.finish!.split(', ').map(size => (
                                    <SelectItem key={size} value={size}>{size}</SelectItem>
                                ))}
                            </SelectContent>
                        </Select>
                    </div>
                )}
                 {hasOptions && (
                    <div>
                        <Label>{(isCustom && hasOptions) ? 'Opção' : 'Quantidade'}</Label>
                        <Select onValueChange={(value) => setSelectedOption((product as Product).options!.find(o => o.label === value) || null)} defaultValue={selectedOption?.label}>
                            <SelectTrigger><SelectValue placeholder="Selecione uma opção" /></SelectTrigger>
                            <SelectContent>
                                {(product as Product).options!.map(opt => (
                                    <SelectItem key={opt.label} value={opt.label}>
                                        {opt.label} - {formatCurrency(opt.price)}
                                    </SelectItem>
                                ))}
                            </SelectContent>
                        </Select>
                    </div>
                )}
                {isCustom && customFields.map(field => {
                    if (field.name === 'quantity' && !showQuantityForCustomWithOptions) {
                        if ((product as CustomProduct).customization.type === 'area') return null;
                    }

                    return (
                        <div key={field.name}>
                            <Label htmlFor={`${product.id}-${field.name}`}>{field.label}</Label>
                            {field.type === 'number' ? (
                                <Input
                                    id={`${product.id}-${field.name}`}
                                    type="number"
                                    min="1"
                                    value={String(customValues[field.name] ?? (field.name === 'quantity' ? 1 : ''))}
                                    onChange={(e) => handleCustomChange(field.name, e.target.value)}
                                    placeholder={field.label}
                                />
                            ) : (
                                <Select onValueChange={(value) => handleCustomChange(field.name, value)} defaultValue={field.options?.[0]}>
                                    <SelectTrigger id={`${product.id}-${field.name}`}>
                                        <SelectValue placeholder={field.label} />
                                    </SelectTrigger>
                                    <SelectContent>
                                        {field.options?.map(opt => <SelectItem key={opt} value={opt}>{opt}</SelectItem>)}
                                    </SelectContent>
                                </Select>
                            )}
                        </div>
                    );
                })}
            </CardContent>
            <CardFooter className="mt-auto flex-col items-start space-y-4">
                 <div className="text-3xl font-bold text-foreground h-10 flex items-center">
                    {price ? formatCurrency(price * (Number(customValues.quantity) || 1)) : <span className="text-base text-muted-foreground">Preço sob consulta</span>}
                 </div>
                 <Button onClick={handleAddToCart} className="w-full bg-primary hover:bg-primary/90" size="lg" disabled={hasOptions && !selectedOption}>
                    <ShoppingCart className="mr-2 h-5 w-5"/>
                    Adicionar ao Carrinho
                 </Button>
            </CardFooter>
        </Card>
    );
}
# ======================================================================================
# FIM DO ARQUIVO: src/components/product-card.tsx
# ======================================================================================


# ======================================================================================
# INÍCIO DO ARQUIVO: src/components/ui/accordion.tsx
# ======================================================================================
"use client"

import * as React from "react"
import * as AccordionPrimitive from "@radix-ui/react-accordion"
import { ChevronDown } from "lucide-react"

import { cn } from "@/lib/utils"

const Accordion = AccordionPrimitive.Root

const AccordionItem = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>
>(({ className, ...props }, ref) => (
  <AccordionPrimitive.Item
    ref={ref}
    className={cn("border-b", className)}
    {...props}
  />
))
AccordionItem.displayName = "AccordionItem"

const AccordionTrigger = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Header className="flex">
    <AccordionPrimitive.Trigger
      ref={ref}
      className={cn(
        "flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180",
        className
      )}
      {...props}
    >
      {children}
      <ChevronDown className="h-4 w-4 shrink-0 transition-transform duration-200" />
    </AccordionPrimitive.Trigger>
  </AccordionPrimitive.Header>
))
AccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName

const AccordionContent = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Content
    ref={ref}
    className="overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down"
    {...props}
  >
    <div className={cn("pb-4 pt-0", className)}>{children}</div>
  </AccordionPrimitive.Content>
))

AccordionContent.displayName = AccordionPrimitive.Content.displayName

export { Accordion, AccordionItem, AccordionTrigger, AccordionContent }
# ======================================================================================
# FIM DO ARQUIVO: src/components/ui/accordion.tsx
# ======================================================================================


# ======================================================================================
# INÍCIO DO ARQUIVO: src/components/ui/alert-dialog.tsx
# ======================================================================================
"use client"

import * as React from "react"
import * as AlertDialogPrimitive from "@radix-ui/react-alert-dialog"

import { cn } from "@/lib/utils"
import { buttonVariants } from "@/components/ui/button"

const AlertDialog = AlertDialogPrimitive.Root

const AlertDialogTrigger = AlertDialogPrimitive.Trigger

const AlertDialogPortal = AlertDialogPrimitive.Portal

const AlertDialogOverlay = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Overlay
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
    ref={ref}
  />
))
AlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName

const AlertDialogContent = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>
>(({ className, ...props }, ref) => (
  <AlertDialogPortal>
    <AlertDialogOverlay />
    <AlertDialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    />
  </AlertDialogPortal>
))
AlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName

const AlertDialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-2 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
AlertDialogHeader.displayName = "AlertDialogHeader"

const AlertDialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
AlertDialogFooter.displayName = "AlertDialogFooter"

const AlertDialogTitle = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold", className)}
    {...props}
  />
))
AlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName

const AlertDialogDescription = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
AlertDialogDescription.displayName =
  AlertDialogPrimitive.Description.displayName

const AlertDialogAction = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Action>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Action
    ref={ref}
    className={cn(buttonVariants(), className)}
    {...props}
  />
))
AlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName

const AlertDialogCancel = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Cancel
    ref={ref}
    className={cn(
      buttonVariants({ variant: "outline" }),
      "mt-2 sm:mt-0",
      className
    )}
    {...props}
  />
))
AlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName

export {
  AlertDialog,
  AlertDialogPortal,
  AlertDialogOverlay,
  AlertDialogTrigger,
  AlertDialogContent,
  AlertDialogHeader,
  AlertDialogFooter,
  AlertDialogTitle,
  AlertDialogDescription,
  AlertDialogAction,
  AlertDialogCancel,
}
# ======================================================================================
# FIM DO ARQUIVO: src/components/ui/alert-dialog.tsx
# ======================================================================================


# ======================================================================================
# INÍCIO DO ARQUIVO: src/components/ui/alert.tsx
# ======================================================================================
import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const alertVariants = cva(
  "relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground",
  {
    variants: {
      variant: {
        default: "bg-background text-foreground",
        destructive:
          "border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

const Alert = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>
>(({ className, variant, ...props }, ref) => (
  <div
    ref={ref}
    role="alert"
    className={cn(alertVariants({ variant }), className)}
    {...props}
  />
))
Alert.displayName = "Alert"

const AlertTitle = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h5
    ref={ref}
    className={cn("mb-1 font-medium leading-none tracking-tight", className)}
    {...props}
  />
))
AlertTitle.displayName = "AlertTitle"

const AlertDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-sm [&_p]:leading-relaxed", className)}
    {...props}
  />
))
AlertDescription.displayName = "AlertDescription"

export { Alert, AlertTitle, AlertDescription }
# ======================================================================================
# FIM DO ARQUIVO: src/components/ui/alert.tsx
# ======================================================================================


# ======================================================================================
# INÍCIO DO ARQUIVO: src/components/ui/avatar.tsx
# ======================================================================================
"use client"

import * as React from "react"
import * as AvatarPrimitive from "@radix-ui/react-avatar"

import { cn } from "@/lib/utils"

const Avatar = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Root
    ref={ref}
    className={cn(
      "relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full",
      className
    )}
    {...props}
  />
))
Avatar.displayName = AvatarPrimitive.Root.displayName

const AvatarImage = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Image>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Image
    ref={ref}
    className={cn("aspect-square h-full w-full", className)}
    {...props}
  />
))
AvatarImage.displayName = AvatarPrimitive.Image.displayName

const AvatarFallback = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Fallback>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Fallback
    ref={ref}
    className={cn(
      "flex h-full w-full items-center justify-center rounded-full bg-muted",
      className
    )}
    {...props}
  />
))
AvatarFallback.displayName = AvatarPrimitive.Fallback.displayName

export { Avatar, AvatarImage, AvatarFallback }
# ======================================================================================
# FIM DO ARQUIVO: src/components/ui/avatar.tsx
# ======================================================================================


# ======================================================================================
# INÍCIO DO ARQUIVO: src/components/ui/badge.tsx
# ======================================================================================
import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const badgeVariants = cva(
  "inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2",
  {
    variants: {
      variant: {
        default:
          "border-transparent bg-primary text-primary-foreground hover:bg-primary/80",
        secondary:
          "border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80",
        destructive:
          "border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80",
        outline: "text-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

export interface BadgeProps
  extends React.HTMLAttributes<HTMLDivElement>,
    VariantProps<typeof badgeVariants> {}

function Badge({ className, variant, ...props }: BadgeProps) {
  return (
    <div className={cn(badgeVariants({ variant }), className)} {...props} />
  )
}

export { Badge, badgeVariants }
# ======================================================================================
# FIM DO ARQUIVO: src/components/ui/badge.tsx
# ======================================================================================


# ======================================================================================
# INÍCIO DO ARQUIVO: src/components/ui/button.tsx
# ======================================================================================
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-all duration-300 ease-in-out focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
  {
    variants: {
      variant: {
        default: "bg-primary text-primary-foreground hover:bg-primary/90",
        destructive:
          "bg-destructive text-destructive-foreground hover:bg-destructive/90",
        outline:
          "border border-input bg-background hover:bg-accent hover:text-accent-foreground",
        secondary:
          "bg-secondary text-secondary-foreground hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-10 px-4 py-2",
        sm: "h-9 rounded-md px-3",
        lg: "h-11 rounded-md px-8",
        icon: "h-10 w-10",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button"
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    )
  }
)
Button.displayName = "Button"

export { Button, buttonVariants }
# ======================================================================================
# FIM DO ARQUIVO: src/components/ui/button.tsx
# ======================================================================================


# ======================================================================================
# INÍCIO DO ARQUIVO: src/components/ui/calendar.tsx
# ======================================================================================
"use client"

import * as React from "react"
import { ChevronLeft, ChevronRight } from "lucide-react"
import { DayPicker } from "react-day-picker"

import { cn } from "@/lib/utils"
import { buttonVariants } from "@/components/ui/button"

export type CalendarProps = React.ComponentProps<typeof DayPicker>

function Calendar({
  className,
  classNames,
  showOutsideDays = true,
  ...props
}: CalendarProps) {
  return (
    <DayPicker
      showOutsideDays={showOutsideDays}
      className={cn("p-3", className)}
      classNames={{
        months: "flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0",
        month: "space-y-4",
        caption: "flex justify-center pt-1 relative items-center",
        caption_label: "text-sm font-medium",
        nav: "space-x-1 flex items-center",
        nav_button: cn(
          buttonVariants({ variant: "outline" }),
          "h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100"
        ),
        nav_button_previous: "absolute left-1",
        nav_button_next: "absolute right-1",
        table: "w-full border-collapse space-y-1",
        head_row: "flex",
        head_cell:
          "text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]",
        row: "flex w-full mt-2",
        cell: "h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20",
        day: cn(
          buttonVariants({ variant: "ghost" }),
          "h-9 w-9 p-0 font-normal aria-selected:opacity-100"
        ),
        day_range_end: "day-range-end",
        day_selected:
          "bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground",
        day_today: "bg-accent text-accent-foreground",
        day_outside:
          "day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground",
        day_disabled: "text-muted-foreground opacity-50",
        day_range_middle:
          "aria-selected:bg-accent aria-selected:text-accent-foreground",
        day_hidden: "invisible",
        ...classNames,
      }}
      components={{
        IconLeft: ({ className, ...props }) => (
          <ChevronLeft className={cn("h-4 w-4", className)} {...props} />
        ),
        IconRight: ({ className, ...props }) => (
          <ChevronRight className={cn("h-4 w-4", className)} {...props} />
        ),
      }}
      {...props}
    />
  )
}
Calendar.displayName = "Calendar"

export { Calendar }
# ======================================================================================
# FIM DO ARQUIVO: src/components/ui/calendar.tsx
# ======================================================================================


# ======================================================================================
# INÍCIO DO ARQUIVO: src/components/ui/card.tsx
# ======================================================================================
import * as React from "react"

import { cn } from "@/lib/utils"

const Card = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "rounded-lg border bg-card text-card-foreground shadow-sm",
      className
    )}
    {...props}
  />
))
Card.displayName = "Card"

const CardHeader = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex flex-col space-y-1.5 p-6", className)}
    {...props}
  />
))
CardHeader.displayName = "CardHeader"

const CardTitle = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "text-2xl font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
CardTitle.displayName = "CardTitle"

const CardDescription = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
CardDescription.displayName = "CardDescription"

const CardContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
))
CardContent.displayName = "CardContent"

const CardFooter = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex items-center p-6 pt-0", className)}
    {...props}
  />
))
CardFooter.displayName = "CardFooter"

export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }
# ======================================================================================
# FIM DO ARQUIVO: src/components/ui/card.tsx
# ======================================================================================


# ======================================================================================
# INÍCIO DO ARQUIVO: src/components/ui/carousel.tsx
# ======================================================================================
"use client"

import * as React from "react"
import useEmblaCarousel, {
  type UseEmblaCarouselType,
} from "embla-carousel-react"
import { ArrowLeft, ArrowRight } from "lucide-react"

import { cn } from "@/lib/utils"
import { Button } from "@/components/ui/button"

type CarouselApi = UseEmblaCarouselType[1]
type UseCarouselParameters = Parameters<typeof useEmblaCarousel>
type CarouselOptions = UseCarouselParameters[0]
type CarouselPlugin = UseCarouselParameters[1]

type CarouselProps = {
  opts?: CarouselOptions
  plugins?: CarouselPlugin
  orientation?: "horizontal" | "vertical"
  setApi?: (api: CarouselApi) => void
}

type CarouselContextProps = {
  carouselRef: ReturnType<typeof useEmblaCarousel>[0]
  api: ReturnType<typeof useEmblaCarousel>[1]
  scrollPrev: () => void
  scrollNext: () => void
  canScrollPrev: boolean
  canScrollNext: boolean
} & CarouselProps

const CarouselContext = React.createContext<CarouselContextProps | null>(null)

function useCarousel() {
  const context = React.useContext(CarouselContext)

  if (!context) {
    throw new Error("useCarousel must be used within a <Carousel />")
  }

  return context
}

const Carousel = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement> & CarouselProps
>(
  (
    {
      orientation = "horizontal",
      opts,
      setApi,
      plugins,
      className,
      children,
      ...props
    },
    ref
  ) => {
    const [carouselRef, api] = useEmblaCarousel(
      {
        ...opts,
        axis: orientation === "horizontal" ? "x" : "y",
      },
      plugins
    )
    const [canScrollPrev, setCanScrollPrev] = React.useState(false)
    const [canScrollNext, setCanScrollNext] = React.useState(false)

    const onSelect = React.useCallback((api: CarouselApi) => {
      if (!api) {
        return
      }

      setCanScrollPrev(api.canScrollPrev())
      setCanScrollNext(api.canScrollNext())
    }, [])

    const scrollPrev = React.useCallback(() => {
      api?.scrollPrev()
    }, [api])

    const scrollNext = React.useCallback(() => {
      api?.scrollNext()
    }, [api])

    const handleKeyDown = React.useCallback(
      (event: React.KeyboardEvent<HTMLDivElement>) => {
        if (event.key === "ArrowLeft") {
          event.preventDefault()
          scrollPrev()
        } else if (event.key === "ArrowRight") {
          event.preventDefault()
          scrollNext()
        }
      },
      [scrollPrev, scrollNext]
    )

    React.useEffect(() => {
      if (!api || !setApi) {
        return
      }

      setApi(api)
    }, [api, setApi])

    React.useEffect(() => {
      if (!api) {
        return
      }

      onSelect(api)
      api.on("reInit", onSelect)
      api.on("select", onSelect)

      return () => {
        api?.off("select", onSelect)
      }
    }, [api, onSelect])

    return (
      <CarouselContext.Provider
        value={{
          carouselRef,
          api: api,
          opts,
          orientation:
            orientation || (opts?.axis === "y" ? "vertical" : "horizontal"),
          scrollPrev,
          scrollNext,
          canScrollPrev,
          canScrollNext,
        }}
      >
        <div
          ref={ref}
          onKeyDownCapture={handleKeyDown}
          className={cn("relative", className)}
          role="region"
          aria-roledescription="carousel"
          {...props}
        >
          {children}
        </div>
      </CarouselContext.Provider>
    )
  }
)
Carousel.displayName = "Carousel"

const CarouselContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const { carouselRef, orientation } = useCarousel()

  return (
    <div ref={carouselRef} className="overflow-hidden">
      <div
        ref={ref}
        className={cn(
          "flex",
          orientation === "horizontal" ? "-ml-4" : "-mt-4 flex-col",
          className
        )}
        {...props}
      />
    </div>
  )
})
CarouselContent.displayName = "CarouselContent"

const CarouselItem = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const { orientation } = useCarousel()

  return (
    <div
      ref={ref}
      role="group"
      aria-roledescription="slide"
      className={cn(
        "min-w-0 shrink-0 grow-0 basis-full",
        orientation === "horizontal" ? "pl-4" : "pt-4",
        className
      )}
      {...props}
    />
  )
})
CarouselItem.displayName = "CarouselItem"

const CarouselPrevious = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<typeof Button>
>(({ className, variant = "outline", size = "icon", ...props }, ref) => {
  const { orientation, scrollPrev, canScrollPrev } = useCarousel()

  return (
    <Button
      ref={ref}
      variant={variant}
      size={size}
      className={cn(
        "absolute  h-8 w-8 rounded-full",
        orientation === "horizontal"
          ? "-left-12 top-1/2 -translate-y-1/2"
          : "-top-12 left-1/2 -translate-x-1/2 rotate-90",
        className
      )}
      disabled={!canScrollPrev}
      onClick={scrollPrev}
      {...props}
    >
      <ArrowLeft className="h-4 w-4" />
      <span className="sr-only">Previous slide</span>
    </Button>
  )
})
CarouselPrevious.displayName = "CarouselPrevious"

const CarouselNext = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<typeof Button>
>(({ className, variant = "outline", size = "icon", ...props }, ref) => {
  const { orientation, scrollNext, canScrollNext } = useCarousel()

  return (
    <Button
      ref={ref}
      variant={variant}
      size={size}
      className={cn(
        "absolute h-8 w-8 rounded-full",
        orientation === "horizontal"
          ? "-right-12 top-1/2 -translate-y-1/2"
          : "-bottom-12 left-1/2 -translate-x-1/2 rotate-90",
        className
      )}
      disabled={!canScrollNext}
      onClick={scrollNext}
      {...props}
    >
      <ArrowRight className="h-4 w-4" />
      <span className="sr-only">Next slide</span>
    </Button>
  )
})
CarouselNext.displayName = "CarouselNext"

export {
  type CarouselApi,
  Carousel,
  CarouselContent,
  CarouselItem,
  CarouselPrevious,
  CarouselNext,
}
# ======================================================================================
# FIM DO ARQUIVO: src/components/ui/carousel.tsx
# ======================================================================================


# ======================================================================================
# INÍCIO DO ARQUIVO: src/components/ui/chart.tsx
# ======================================================================================
"use client"

import * as React from "react"
import * as RechartsPrimitive from "recharts"

import { cn } from "@/lib/utils"

// Format: { THEME_NAME: CSS_SELECTOR }
const THEMES = { light: "", dark: ".dark" } as const

export type ChartConfig = {
  [k in string]: {
    label?: React.ReactNode
    icon?: React.ComponentType
  } & (
    | { color?: string; theme?: never }
    | { color?: never; theme: Record<keyof typeof THEMES, string> }
  )
}

type ChartContextProps = {
  config: ChartConfig
}

const ChartContext = React.createContext<ChartContextProps | null>(null)

function useChart() {
  const context = React.useContext(ChartContext)

  if (!context) {
    throw new Error("useChart must be used within a <ChartContainer />")
  }

  return context
}

const ChartContainer = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    config: ChartConfig
    children: React.ComponentProps<
      typeof RechartsPrimitive.ResponsiveContainer
    >["children"]
  }
>(({ id, className, children, config, ...props }, ref) => {
  const uniqueId = React.useId()
  const chartId = `chart-${id || uniqueId.replace(/:/g, "")}`

  return (
    <ChartContext.Provider value={{ config }}>
      <div
        data-chart={chartId}
        ref={ref}
        className={cn(
          "flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none",
          className
        )}
        {...props}
      >
        <ChartStyle id={chartId} config={config} />
        <RechartsPrimitive.ResponsiveContainer>
          {children}
        </RechartsPrimitive.ResponsiveContainer>
      </div>
    </ChartContext.Provider>
  )
})
ChartContainer.displayName = "Chart"

const ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {
  const colorConfig = Object.entries(config).filter(
    ([, config]) => config.theme || config.color
  )

  if (!colorConfig.length) {
    return null
  }

  return (
    <style
      dangerouslySetInnerHTML={{
        __html: Object.entries(THEMES)
          .map(
            ([theme, prefix]) => `
${prefix} [data-chart=${id}] {
${colorConfig
  .map(([key, itemConfig]) => {
    const color =
      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||
      itemConfig.color
    return color ? `  --color-${key}: ${color};` : null
  })
  .join("\n")}
}
`
          )
          .join("\n"),
      }}
    />
  )
}

const ChartTooltip = RechartsPrimitive.Tooltip

const ChartTooltipContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &
    React.ComponentProps<"div"> & {
      hideLabel?: boolean
      hideIndicator?: boolean
      indicator?: "line" | "dot" | "dashed"
      nameKey?: string
      labelKey?: string
    }
>(
  (
    {
      active,
      payload,
      className,
      indicator = "dot",
      hideLabel = false,
      hideIndicator = false,
      label,
      labelFormatter,
      labelClassName,
      formatter,
      color,
      nameKey,
      labelKey,
    },
    ref
  ) => {
    const { config } = useChart()

    const tooltipLabel = React.useMemo(() => {
      if (hideLabel || !payload?.length) {
        return null
      }

      const [item] = payload
      const key = `${labelKey || item.dataKey || item.name || "value"}`
      const itemConfig = getPayloadConfigFromPayload(config, item, key)
      const value =
        !labelKey && typeof label === "string"
          ? config[label as keyof typeof config]?.label || label
          : itemConfig?.label

      if (labelFormatter) {
        return (
          <div className={cn("font-medium", labelClassName)}>
            {labelFormatter(value, payload)}
          </div>
        )
      }

      if (!value) {
        return null
      }

      return <div className={cn("font-medium", labelClassName)}>{value}</div>
    }, [
      label,
      labelFormatter,
      payload,
      hideLabel,
      labelClassName,
      config,
      labelKey,
    ])

    if (!active || !payload?.length) {
      return null
    }

    const nestLabel = payload.length === 1 && indicator !== "dot"

    return (
      <div
        ref={ref}
        className={cn(
          "grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl",
          className
        )}
      >
        {!nestLabel ? tooltipLabel : null}
        <div className="grid gap-1.5">
          {payload.map((item, index) => {
            const key = `${nameKey || item.name || item.dataKey || "value"}`
            const itemConfig = getPayloadConfigFromPayload(config, item, key)
            const indicatorColor = color || item.payload.fill || item.color

            return (
              <div
                key={item.dataKey}
                className={cn(
                  "flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground",
                  indicator === "dot" && "items-center"
                )}
              >
                {formatter && item?.value !== undefined && item.name ? (
                  formatter(item.value, item.name, item, index, item.payload)
                ) : (
                  <>
                    {itemConfig?.icon ? (
                      <itemConfig.icon />
                    ) : (
                      !hideIndicator && (
                        <div
                          className={cn(
                            "shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]",
                            {
                              "h-2.5 w-2.5": indicator === "dot",
                              "w-1": indicator === "line",
                              "w-0 border-[1.5px] border-dashed bg-transparent":
                                indicator === "dashed",
                              "my-0.5": nestLabel && indicator === "dashed",
                            }
                          )}
                          style={
                            {
                              "--color-bg": indicatorColor,
                              "--color-border": indicatorColor,
                            } as React.CSSProperties
                          }
                        />
                      )
                    )}
                    <div
                      className={cn(
                        "flex flex-1 justify-between leading-none",
                        nestLabel ? "items-end" : "items-center"
                      )}
                    >
                      <div className="grid gap-1.5">
                        {nestLabel ? tooltipLabel : null}
                        <span className="text-muted-foreground">
                          {itemConfig?.label || item.name}
                        </span>
                      </div>
                      {item.value && (
                        <span className="font-mono font-medium tabular-nums text-foreground">
                          {item.value.toLocaleString()}
                        </span>
                      )}
                    </div>
                  </>
                )}
              </div>
            )
          })}
        </div>
      </div>
    )
  }
)
ChartTooltipContent.displayName = "ChartTooltip"

const ChartLegend = RechartsPrimitive.Legend

const ChartLegendContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> &
    Pick<RechartsPrimitive.LegendProps, "payload" | "verticalAlign"> & {
      hideIcon?: boolean
      nameKey?: string
    }
>(
  (
    { className, hideIcon = false, payload, verticalAlign = "bottom", nameKey },
    ref
  ) => {
    const { config } = useChart()

    if (!payload?.length) {
      return null
    }

    return (
      <div
        ref={ref}
        className={cn(
          "flex items-center justify-center gap-4",
          verticalAlign === "top" ? "pb-3" : "pt-3",
          className
        )}
      >
        {payload.map((item) => {
          const key = `${nameKey || item.dataKey || "value"}`
          const itemConfig = getPayloadConfigFromPayload(config, item, key)

          return (
            <div
              key={item.value}
              className={cn(
                "flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground"
              )}
            >
              {itemConfig?.icon && !hideIcon ? (
                <itemConfig.icon />
              ) : (
                <div
                  className="h-2 w-2 shrink-0 rounded-[2px]"
                  style={{
                    backgroundColor: item.color,
                  }}
                />
              )}
              {itemConfig?.label}
            </div>
          )
        })}
      </div>
    )
  }
)
ChartLegendContent.displayName = "ChartLegend"

// Helper to extract item config from a payload.
function getPayloadConfigFromPayload(
  config: ChartConfig,
  payload: unknown,
  key: string
) {
  if (typeof payload !== "object" || payload === null) {
    return undefined
  }

  const payloadPayload =
    "payload" in payload &&
    typeof payload.payload === "object" &&
    payload.payload !== null
      ? payload.payload
      : undefined

  let configLabelKey: string = key

  if (
    key in payload &&
    typeof payload[key as keyof typeof payload] === "string"
  ) {
    configLabelKey = payload[key as keyof typeof payload] as string
  } else if (
    payloadPayload &&
    key in payloadPayload &&
    typeof payloadPayload[key as keyof typeof payloadPayload] === "string"
  ) {
    configLabelKey = payloadPayload[
      key as keyof typeof payloadPayload
    ] as string
  }

  return configLabelKey in config
    ? config[configLabelKey]
    : config[key as keyof typeof config]
}

export {
  ChartContainer,
  ChartTooltip,
  ChartTooltipContent,
  ChartLegend,
  ChartLegendContent,
  ChartStyle,
}
# ======================================================================================
# FIM DO ARQUIVO: src/components/ui/chart.tsx
# ======================================================================================


# ======================================================================================
# INÍCIO DO ARQUIVO: src/components/ui/checkbox.tsx
# ======================================================================================
"use client"

import * as React from "react"
import * as CheckboxPrimitive from "@radix-ui/react-checkbox"
import { Check } from "lucide-react"

import { cn } from "@/lib/utils"

const Checkbox = React.forwardRef<
  React.ElementRef<typeof CheckboxPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>
>(({ className, ...props }, ref) => (
  <CheckboxPrimitive.Root
    ref={ref}
    className={cn(
      "peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground",
      className
    )}
    {...props}
  >
    <CheckboxPrimitive.Indicator
      className={cn("flex items-center justify-center text-current")}
    >
      <Check className="h-4 w-4" />
    </CheckboxPrimitive.Indicator>
  </CheckboxPrimitive.Root>
))
Checkbox.displayName = CheckboxPrimitive.Root.displayName

export { Checkbox }
# ======================================================================================
# FIM DO ARQUIVO: src/components/ui/checkbox.tsx
# ======================================================================================


# ======================================================================================
# INÍCIO DO ARQUIVO: src/components/ui/collapsible.tsx
# ======================================================================================
"use client"

import * as CollapsiblePrimitive from "@radix-ui/react-collapsible"

const Collapsible = CollapsiblePrimitive.Root

const CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger

const CollapsibleContent = CollapsiblePrimitive.CollapsibleContent

export { Collapsible, CollapsibleTrigger, CollapsibleContent }
# ======================================================================================
# FIM DO ARQUIVO: src/components/ui/collapsible.tsx
# ======================================================================================


# ======================================================================================
# INÍCIO DO ARQUIVO: src/components/ui/dialog.tsx
# ======================================================================================
"use client"

import * as React from "react"
import * as DialogPrimitive from "@radix-ui/react-dialog"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const Dialog = DialogPrimitive.Root

const DialogTrigger = DialogPrimitive.Trigger

const DialogPortal = DialogPrimitive.Portal

const DialogClose = DialogPrimitive.Close

const DialogOverlay = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Overlay
    ref={ref}
    className={cn(
      "fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
  />
))
DialogOverlay.displayName = DialogPrimitive.Overlay.displayName

const DialogContent = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DialogPortal>
    <DialogOverlay />
    <DialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    >
      {children}
      <DialogPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </DialogPrimitive.Close>
    </DialogPrimitive.Content>
  </DialogPortal>
))
DialogContent.displayName = DialogPrimitive.Content.displayName

const DialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-1.5 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
DialogHeader.displayName = "DialogHeader"

const DialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
DialogFooter.displayName = "DialogFooter"

const DialogTitle = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Title
    ref={ref}
    className={cn(
      "text-lg font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
DialogTitle.displayName = DialogPrimitive.Title.displayName

const DialogDescription = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
DialogDescription.displayName = DialogPrimitive.Description.displayName

export {
  Dialog,
  DialogPortal,
  DialogOverlay,
  DialogClose,
  DialogTrigger,
  DialogContent,
  DialogHeader,
  DialogFooter,
  DialogTitle,
  DialogDescription,
}
# ======================================================================================
# FIM DO ARQUIVO: src/components/ui/dialog.tsx
# ======================================================================================


# ======================================================================================
# INÍCIO DO ARQUIVO: src/components/ui/dropdown-menu.tsx
# ======================================================================================
"use client"

import * as React from "react"
import * as DropdownMenuPrimitive from "@radix-ui/react-dropdown-menu"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const DropdownMenu = DropdownMenuPrimitive.Root

const DropdownMenuTrigger = DropdownMenuPrimitive.Trigger

const DropdownMenuGroup = DropdownMenuPrimitive.Group

const DropdownMenuPortal = DropdownMenuPrimitive.Portal

const DropdownMenuSub = DropdownMenuPrimitive.Sub

const DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup

const DropdownMenuSubTrigger = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <DropdownMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto" />
  </DropdownMenuPrimitive.SubTrigger>
))
DropdownMenuSubTrigger.displayName =
  DropdownMenuPrimitive.SubTrigger.displayName

const DropdownMenuSubContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
DropdownMenuSubContent.displayName =
  DropdownMenuPrimitive.SubContent.displayName

const DropdownMenuContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <DropdownMenuPrimitive.Portal>
    <DropdownMenuPrimitive.Content
      ref={ref}
      sideOffset={sideOffset}
      className={cn(
        "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </DropdownMenuPrimitive.Portal>
))
DropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName

const DropdownMenuItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
DropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName

const DropdownMenuCheckboxItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <DropdownMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.CheckboxItem>
))
DropdownMenuCheckboxItem.displayName =
  DropdownMenuPrimitive.CheckboxItem.displayName

const DropdownMenuRadioItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <DropdownMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.RadioItem>
))
DropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName

const DropdownMenuLabel = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
DropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName

const DropdownMenuSeparator = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
DropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName

const DropdownMenuShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn("ml-auto text-xs tracking-widest opacity-60", className)}
      {...props}
    />
  )
}
DropdownMenuShortcut.displayName = "DropdownMenuShortcut"

export {
  DropdownMenu,
  DropdownMenuTrigger,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuCheckboxItem,
  DropdownMenuRadioItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuShortcut,
  DropdownMenuGroup,
  DropdownMenuPortal,
  DropdownMenuSub,
  DropdownMenuSubContent,
  DropdownMenuSubTrigger,
  DropdownMenuRadioGroup,
}
# ======================================================================================
# FIM DO ARQUIVO: src/components/ui/dropdown-menu.tsx
# ======================================================================================


# ======================================================================================
# INÍCIO DO ARQUIVO: src/components/ui/form.tsx
# ======================================================================================
"use client"

import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { Slot } from "@radix-ui/react-slot"
import {
  Controller,
  FormProvider,
  useFormContext,
  type ControllerProps,
  type FieldPath,
  type FieldValues,
} from "react-hook-form"

import { cn } from "@/lib/utils"
import { Label } from "@/components/ui/label"

const Form = FormProvider

type FormFieldContextValue<
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>
> = {
  name: TName
}

const FormFieldContext = React.createContext<FormFieldContextValue>(
  {} as FormFieldContextValue
)

const FormField = <
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>
>({
  ...props
}: ControllerProps<TFieldValues, TName>) => {
  return (
    <FormFieldContext.Provider value={{ name: props.name }}>
      <Controller {...props} />
    </FormFieldContext.Provider>
  )
}

const useFormField = () => {
  const fieldContext = React.useContext(FormFieldContext)
  const itemContext = React.useContext(FormItemContext)
  const { getFieldState, formState } = useFormContext()

  const fieldState = getFieldState(fieldContext.name, formState)

  if (!fieldContext) {
    throw new Error("useFormField should be used within <FormField>")
  }

  const { id } = itemContext

  return {
    id,
    name: fieldContext.name,
    formItemId: `${id}-form-item`,
    formDescriptionId: `${id}-form-item-description`,
    formMessageId: `${id}-form-item-message`,
    ...fieldState,
  }
}

type FormItemContextValue = {
  id: string
}

const FormItemContext = React.createContext<FormItemContextValue>(
  {} as FormItemContextValue
)

const FormItem = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const id = React.useId()

  return (
    <FormItemContext.Provider value={{ id }}>
      <div ref={ref} className={cn("space-y-2", className)} {...props} />
    </FormItemContext.Provider>
  )
})
FormItem.displayName = "FormItem"

const FormLabel = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>
>(({ className, ...props }, ref) => {
  const { error, formItemId } = useFormField()

  return (
    <Label
      ref={ref}
      className={cn(error && "text-destructive", className)}
      htmlFor={formItemId}
      {...props}
    />
  )
})
FormLabel.displayName = "FormLabel"

const FormControl = React.forwardRef<
  React.ElementRef<typeof Slot>,
  React.ComponentPropsWithoutRef<typeof Slot>
>(({ ...props }, ref) => {
  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()

  return (
    <Slot
      ref={ref}
      id={formItemId}
      aria-describedby={
        !error
          ? `${formDescriptionId}`
          : `${formDescriptionId} ${formMessageId}`
      }
      aria-invalid={!!error}
      {...props}
    />
  )
})
FormControl.displayName = "FormControl"

const FormDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => {
  const { formDescriptionId } = useFormField()

  return (
    <p
      ref={ref}
      id={formDescriptionId}
      className={cn("text-sm text-muted-foreground", className)}
      {...props}
    />
  )
})
FormDescription.displayName = "FormDescription"

const FormMessage = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, children, ...props }, ref) => {
  const { error, formMessageId } = useFormField()
  const body = error ? String(error?.message ?? "") : children

  if (!body) {
    return null
  }

  return (
    <p
      ref={ref}
      id={formMessageId}
      className={cn("text-sm font-medium text-destructive", className)}
      {...props}
    >
      {body}
    </p>
  )
})
FormMessage.displayName = "FormMessage"

export {
  useFormField,
  Form,
  FormItem,
  FormLabel,
  FormControl,
  FormDescription,
  FormMessage,
  FormField,
}
# ======================================================================================
# FIM DO ARQUIVO: src/components/ui/form.tsx
# ======================================================================================


# ======================================================================================
# INÍCIO DO ARQUIVO: src/components/ui/input.tsx
# ======================================================================================
import * as React from "react"

import { cn } from "@/lib/utils"

const Input = React.forwardRef<HTMLInputElement, React.ComponentProps<"input">>(
  ({ className, type, ...props }, ref) => {
    return (
      <input
        type={type}
        className={cn(
          "flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
          className
        )}
        ref={ref}
        {...props}
      />
    )
  }
)
Input.displayName = "Input"

export { Input }
# ======================================================================================
# FIM DO ARQUIVO: src/components/ui/input.tsx
# ======================================================================================


# ======================================================================================
# INÍCIO DO ARQUIVO: src/components/ui/label.tsx
# ======================================================================================
"use client"

import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const labelVariants = cva(
  "text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
)

const Label = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &
    VariantProps<typeof labelVariants>
>(({ className, ...props }, ref) => (
  <LabelPrimitive.Root
    ref={ref}
    className={cn(labelVariants(), className)}
    {...props}
  />
))
Label.displayName = LabelPrimitive.Root.displayName

export { Label }
# ======================================================================================
# FIM DO ARQUIVO: src/components/ui/label.tsx
# ======================================================================================


# ======================================================================================
# INÍCIO DO ARQUIVO: src/components/ui/menubar.tsx
# ======================================================================================
"use client"

import * as React from "react"
import * as MenubarPrimitive from "@radix-ui/react-menubar"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

function MenubarMenu({
  ...props
}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {
  return <MenubarPrimitive.Menu {...props} />
}

function MenubarGroup({
  ...props
}: React.ComponentProps<typeof MenubarPrimitive.Group>) {
  return <MenubarPrimitive.Group {...props} />
}

function MenubarPortal({
  ...props
}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {
  return <MenubarPrimitive.Portal {...props} />
}

function MenubarRadioGroup({
  ...props
}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {
  return <MenubarPrimitive.RadioGroup {...props} />
}

function MenubarSub({
  ...props
}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {
  return <MenubarPrimitive.Sub data-slot="menubar-sub" {...props} />
}

const Menubar = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Root
    ref={ref}
    className={cn(
      "flex h-10 items-center space-x-1 rounded-md border bg-background p-1",
      className
    )}
    {...props}
  />
))
Menubar.displayName = MenubarPrimitive.Root.displayName

const MenubarTrigger = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Trigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
      className
    )}
    {...props}
  />
))
MenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName

const MenubarSubTrigger = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <MenubarPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto h-4 w-4" />
  </MenubarPrimitive.SubTrigger>
))
MenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName

const MenubarSubContent = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
MenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName

const MenubarContent = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>
>(
  (
    { className, align = "start", alignOffset = -4, sideOffset = 8, ...props },
    ref
  ) => (
    <MenubarPrimitive.Portal>
      <MenubarPrimitive.Content
        ref={ref}
        align={align}
        alignOffset={alignOffset}
        sideOffset={sideOffset}
        className={cn(
          "z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
          className
        )}
        {...props}
      />
    </MenubarPrimitive.Portal>
  )
)
MenubarContent.displayName = MenubarPrimitive.Content.displayName

const MenubarItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <MenubarPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
MenubarItem.displayName = MenubarPrimitive.Item.displayName

const MenubarCheckboxItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <MenubarPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <MenubarPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </MenubarPrimitive.ItemIndicator>
    </span>
    {children}
  </MenubarPrimitive.CheckboxItem>
))
MenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName

const MenubarRadioItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <MenubarPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <MenubarPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </MenubarPrimitive.ItemIndicator>
    </span>
    {children}
  </MenubarPrimitive.RadioItem>
))
MenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName

const MenubarLabel = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <MenubarPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
MenubarLabel.displayName = MenubarPrimitive.Label.displayName

const MenubarSeparator = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
MenubarSeparator.displayName = MenubarPrimitive.Separator.displayName

const MenubarShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn(
        "ml-auto text-xs tracking-widest text-muted-foreground",
        className
      )}
      {...props}
    />
  )
}
MenubarShortcut.displayname = "MenubarShortcut"

export {
  Menubar,
  MenubarMenu,
  MenubarTrigger,
  MenubarContent,
  MenubarItem,
  MenubarSeparator,
  MenubarLabel,
  MenubarCheckboxItem,
  MenubarRadioGroup,
  MenubarRadioItem,
  MenubarPortal,
  MenubarSubContent,
  MenubarSubTrigger,
  MenubarGroup,
  MenubarSub,
  MenubarShortcut,
}
# ======================================================================================
# FIM DO ARQUIVO: src/components/ui/menubar.tsx
# ======================================================================================


# ======================================================================================
# INÍCIO DO ARQUIVO: src/components/ui/popover.tsx
# ======================================================================================
"use client"

import * as React from "react"
import * as PopoverPrimitive from "@radix-ui/react-popover"

import { cn } from "@/lib/utils"

const Popover = PopoverPrimitive.Root

const PopoverTrigger = PopoverPrimitive.Trigger

const PopoverContent = React.forwardRef<
  React.ElementRef<typeof PopoverPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>
>(({ className, align = "center", sideOffset = 4, ...props }, ref) => (
  <PopoverPrimitive.Portal>
    <PopoverPrimitive.Content
      ref={ref}
      align={align}
      sideOffset={sideOffset}
      className={cn(
        "z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </PopoverPrimitive.Portal>
))
PopoverContent.displayName = PopoverPrimitive.Content.displayName

export { Popover, PopoverTrigger, PopoverContent }
# ======================================================================================
# FIM DO ARQUIVO: src/components/ui/popover.tsx
# ======================================================================================


# ======================================================================================
# INÍCIO DO ARQUIVO: src/components/ui/progress.tsx
# ======================================================================================
"use client"

import * as React from "react"
import * as ProgressPrimitive from "@radix-ui/react-progress"

import { cn } from "@/lib/utils"

const Progress = React.forwardRef<
  React.ElementRef<typeof ProgressPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>
>(({ className, value, ...props }, ref) => (
  <ProgressPrimitive.Root
    ref={ref}
    className={cn(
      "relative h-4 w-full overflow-hidden rounded-full bg-secondary",
      className
    )}
    {...props}
  >
    <ProgressPrimitive.Indicator
      className="h-full w-full flex-1 bg-primary transition-all"
      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}
    />
  </ProgressPrimitive.Root>
))
Progress.displayName = ProgressPrimitive.Root.displayName

export { Progress }
# ======================================================================================
# FIM DO ARQUIVO: src/components/ui/progress.tsx
# ======================================================================================


# ======================================================================================
# INÍCIO DO ARQUIVO: src/components/ui/radio-group.tsx
# ======================================================================================
"use client"

import * as React from "react"
import * as RadioGroupPrimitive from "@radix-ui/react-radio-group"
import { Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const RadioGroup = React.forwardRef<
  React.ElementRef<typeof RadioGroupPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>
>(({ className, ...props }, ref) => {
  return (
    <RadioGroupPrimitive.Root
      className={cn("grid gap-2", className)}
      {...props}
      ref={ref}
    />
  )
})
RadioGroup.displayName = RadioGroupPrimitive.Root.displayName

const RadioGroupItem = React.forwardRef<
  React.ElementRef<typeof RadioGroupPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>
>(({ className, ...props }, ref) => {
  return (
    <RadioGroupPrimitive.Item
      ref={ref}
      className={cn(
        "aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      {...props}
    >
      <RadioGroupPrimitive.Indicator className="flex items-center justify-center">
        <Circle className="h-2.5 w-2.5 fill-current text-current" />
      </RadioGroupPrimitive.Indicator>
    </RadioGroupPrimitive.Item>
  )
})
RadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName

export { RadioGroup, RadioGroupItem }
# ======================================================================================
# FIM DO ARQUIVO: src/components/ui/radio-group.tsx
# ======================================================================================


# ======================================================================================
# INÍCIO DO ARQUIVO: src/components/ui/scroll-area.tsx
# ======================================================================================
"use client"

import * as React from "react"
import * as ScrollAreaPrimitive from "@radix-ui/react-scroll-area"

import { cn } from "@/lib/utils"

const ScrollArea = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>
>(({ className, children, ...props }, ref) => (
  <ScrollAreaPrimitive.Root
    ref={ref}
    className={cn("relative overflow-hidden", className)}
    {...props}
  >
    <ScrollAreaPrimitive.Viewport className="h-full w-full rounded-[inherit]">
      {children}
    </ScrollAreaPrimitive.Viewport>
    <ScrollBar />
    <ScrollAreaPrimitive.Corner />
  </ScrollAreaPrimitive.Root>
))
ScrollArea.displayName = ScrollAreaPrimitive.Root.displayName

const ScrollBar = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>
>(({ className, orientation = "vertical", ...props }, ref) => (
  <ScrollAreaPrimitive.ScrollAreaScrollbar
    ref={ref}
    orientation={orientation}
    className={cn(
      "flex touch-none select-none transition-colors",
      orientation === "vertical" &&
        "h-full w-2.5 border-l border-l-transparent p-[1px]",
      orientation === "horizontal" &&
        "h-2.5 flex-col border-t border-t-transparent p-[1px]",
      className
    )}
    {...props}
  >
    <ScrollAreaPrimitive.ScrollAreaThumb className="relative flex-1 rounded-full bg-border" />
  </ScrollAreaPrimitive.ScrollAreaScrollbar>
))
ScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName

export { ScrollArea, ScrollBar }
# ======================================================================================
# FIM DO ARQUIVO: src/components/ui/scroll-area.tsx
# ======================================================================================


# ======================================================================================
# INÍCIO DO ARQUIVO: src/components/ui/select.tsx
# ======================================================================================
"use client"

import * as React from "react"
import * as SelectPrimitive from "@radix-ui/react-select"
import { Check, ChevronDown, ChevronUp } from "lucide-react"

import { cn } from "@/lib/utils"

const Select = SelectPrimitive.Root

const SelectGroup = SelectPrimitive.Group

const SelectValue = SelectPrimitive.Value

const SelectTrigger = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Trigger
    ref={ref}
    className={cn(
      "flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1",
      className
    )}
    {...props}
  >
    {children}
    <SelectPrimitive.Icon asChild>
      <ChevronDown className="h-4 w-4 opacity-50" />
    </SelectPrimitive.Icon>
  </SelectPrimitive.Trigger>
))
SelectTrigger.displayName = SelectPrimitive.Trigger.displayName

const SelectScrollUpButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollUpButton
    ref={ref}
    className={cn(
      "flex cursor-default items-center justify-center py-1",
      className
    )}
    {...props}
  >
    <ChevronUp className="h-4 w-4" />
  </SelectPrimitive.ScrollUpButton>
))
SelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName

const SelectScrollDownButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollDownButton
    ref={ref}
    className={cn(
      "flex cursor-default items-center justify-center py-1",
      className
    )}
    {...props}
  >
    <ChevronDown className="h-4 w-4" />
  </SelectPrimitive.ScrollDownButton>
))
SelectScrollDownButton.displayName =
  SelectPrimitive.ScrollDownButton.displayName

const SelectContent = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>
>(({ className, children, position = "popper", ...props }, ref) => (
  <SelectPrimitive.Portal>
    <SelectPrimitive.Content
      ref={ref}
      className={cn(
        "relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:-translate-y-1",
        position === "popper" &&
          "data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1",
        className
      )}
      position={position}
      {...props}
    >
      <SelectScrollUpButton />
      <SelectPrimitive.Viewport
        className={cn(
          "p-1",
          position === "popper" &&
            "h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]"
        )}
      >
        {children}
      </SelectPrimitive.Viewport>
      <SelectScrollDownButton />
    </SelectPrimitive.Content>
  </SelectPrimitive.Portal>
))
SelectContent.displayName = SelectPrimitive.Content.displayName

const SelectLabel = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Label
    ref={ref}
    className={cn("py-1.5 pl-8 pr-2 text-sm font-semibold", className)}
    {...props}
  />
))
SelectLabel.displayName = SelectPrimitive.Label.displayName

const SelectItem = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <SelectPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </SelectPrimitive.ItemIndicator>
    </span>

    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
  </SelectPrimitive.Item>
))
SelectItem.displayName = SelectPrimitive.Item.displayName

const SelectSeparator = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
SelectSeparator.displayName = SelectPrimitive.Separator.displayName

export {
  Select,
  SelectGroup,
  SelectValue,
  SelectTrigger,
  SelectContent,
  SelectLabel,
  SelectItem,
  SelectSeparator,
  SelectScrollUpButton,
  SelectScrollDownButton,
}
# ======================================================================================
# FIM DO ARQUIVO: src/components/ui/select.tsx
# ======================================================================================


# ======================================================================================
# INÍCIO DO ARQUIVO: src/components/ui/separator.tsx
# ======================================================================================
"use client"

import * as React from "react"
import * as SeparatorPrimitive from "@radix-ui/react-separator"

import { cn } from "@/lib/utils"

const Separator = React.forwardRef<
  React.ElementRef<typeof SeparatorPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>
>(
  (
    { className, orientation = "horizontal", decorative = true, ...props },
    ref
  ) => (
    <SeparatorPrimitive.Root
      ref={ref}
      decorative={decorative}
      orientation={orientation}
      className={cn(
        "shrink-0 bg-border",
        orientation === "horizontal" ? "h-[1px] w-full" : "h-full w-[1px]",
        className
      )}
      {...props}
    />
  )
)
Separator.displayName = SeparatorPrimitive.Root.displayName

export { Separator }
# ======================================================================================
# FIM DO ARQUIVO: src/components/ui/separator.tsx
# ======================================================================================


# ======================================================================================
# INÍCIO DO ARQUIVO: src/components/ui/sheet.tsx
# ======================================================================================
"use client"

import * as React from "react"
import * as SheetPrimitive from "@radix-ui/react-dialog"
import { cva, type VariantProps } from "class-variance-authority"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const Sheet = SheetPrimitive.Root

const SheetTrigger = SheetPrimitive.Trigger

const SheetClose = SheetPrimitive.Close

const SheetPortal = SheetPrimitive.Portal

const SheetOverlay = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Overlay
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
    ref={ref}
  />
))
SheetOverlay.displayName = SheetPrimitive.Overlay.displayName

const sheetVariants = cva(
  "fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500",
  {
    variants: {
      side: {
        top: "inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top",
        bottom:
          "inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom",
        left: "inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm",
        right:
          "inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm",
      },
    },
    defaultVariants: {
      side: "right",
    },
  }
)

interface SheetContentProps
  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,
    VariantProps<typeof sheetVariants> {}

const SheetContent = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Content>,
  SheetContentProps
>(({ side = "right", className, children, ...props }, ref) => (
  <SheetPortal>
    <SheetOverlay />
    <SheetPrimitive.Content
      ref={ref}
      className={cn(sheetVariants({ side }), className)}
      {...props}
    >
      {children}
      <SheetPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </SheetPrimitive.Close>
    </SheetPrimitive.Content>
  </SheetPortal>
))
SheetContent.displayName = SheetPrimitive.Content.displayName

const SheetHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-2 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
SheetHeader.displayName = "SheetHeader"

const SheetFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
SheetFooter.displayName = "SheetFooter"

const SheetTitle = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold text-foreground", className)}
    {...props}
  />
))
SheetTitle.displayName = SheetPrimitive.Title.displayName

const SheetDescription = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
SheetDescription.displayName = SheetPrimitive.Description.displayName

export {
  Sheet,
  SheetPortal,
  SheetOverlay,
  SheetTrigger,
  SheetClose,
  SheetContent,
  SheetHeader,
  SheetFooter,
  SheetTitle,
  SheetDescription,
}
# ======================================================================================
# FIM DO ARQUIVO: src/components/ui/sheet.tsx
# ======================================================================================


# ======================================================================================
# INÍCIO DO ARQUIVO: src/components/ui/skeleton.tsx
# ======================================================================================
import { cn } from "@/lib/utils"

function Skeleton({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) {
  return (
    <div
      className={cn("animate-pulse rounded-md bg-muted", className)}
      {...props}
    />
  )
}

export { Skeleton }
# ======================================================================================
# FIM DO ARQUIVO: src/components/ui/skeleton.tsx
# ======================================================================================


# ======================================================================================
# INÍCIO DO ARQUIVO: src/components/ui/slider.tsx
# ======================================================================================
"use client"

import * as React from "react"
import * as SliderPrimitive from "@radix-ui/react-slider"

import { cn } from "@/lib/utils"

const Slider = React.forwardRef<
  React.ElementRef<typeof SliderPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>
>(({ className, ...props }, ref) => (
  <SliderPrimitive.Root
    ref={ref}
    className={cn(
      "relative flex w-full touch-none select-none items-center",
      className
    )}
    {...props}
  >
    <SliderPrimitive.Track className="relative h-2 w-full grow overflow-hidden rounded-full bg-secondary">
      <SliderPrimitive.Range className="absolute h-full bg-primary" />
    </SliderPrimitive.Track>
    <SliderPrimitive.Thumb className="block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50" />
  </SliderPrimitive.Root>
))
Slider.displayName = SliderPrimitive.Root.displayName

export { Slider }
# ======================================================================================
# FIM DO ARQUIVO: src/components/ui/slider.tsx
# ======================================================================================


# ======================================================================================
# INÍCIO DO ARQUIVO: src/components/ui/switch.tsx
# ======================================================================================
"use client"

import * as React from "react"
import * as SwitchPrimitives from "@radix-ui/react-switch"

import { cn } from "@/lib/utils"

const Switch = React.forwardRef<
  React.ElementRef<typeof SwitchPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>
>(({ className, ...props }, ref) => (
  <SwitchPrimitives.Root
    className={cn(
      "peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input",
      className
    )}
    {...props}
    ref={ref}
  >
    <SwitchPrimitives.Thumb
      className={cn(
        "pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0"
      )}
    />
  </SwitchPrimitives.Root>
))
Switch.displayName = SwitchPrimitives.Root.displayName

export { Switch }
# ======================================================================================
# FIM DO ARQUIVO: src/components/ui/switch.tsx
# ======================================================================================


# ======================================================================================
# INÍCIO DO ARQUIVO: src/components/ui/table.tsx
# ======================================================================================
import * as React from "react"

import { cn } from "@/lib/utils"

const Table = React.forwardRef<
  HTMLTableElement,
  React.HTMLAttributes<HTMLTableElement>
>(({ className, ...props }, ref) => (
  <div className="relative w-full overflow-auto">
    <table
      ref={ref}
      className={cn("w-full caption-bottom text-sm", className)}
      {...props}
    />
  </div>
))
Table.displayName = "Table"

const TableHeader = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <thead ref={ref} className={cn("[&_tr]:border-b", className)} {...props} />
))
TableHeader.displayName = "TableHeader"

const TableBody = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <tbody
    ref={ref}
    className={cn("[&_tr:last-child]:border-0", className)}
    {...props}
  />
))
TableBody.displayName = "TableBody"

const TableFooter = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <tfoot
    ref={ref}
    className={cn(
      "border-t bg-muted/50 font-medium [&>tr]:last:border-b-0",
      className
    )}
    {...props}
  />
))
TableFooter.displayName = "TableFooter"

const TableRow = React.forwardRef<
  HTMLTableRowElement,
  React.HTMLAttributes<HTMLTableRowElement>
>(({ className, ...props }, ref) => (
  <tr
    ref={ref}
    className={cn(
      "border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted",
      className
    )}
    {...props}
  />
))
TableRow.displayName = "TableRow"

const TableHead = React.forwardRef<
  HTMLTableCellElement,
  React.ThHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, ref) => (
  <th
    ref={ref}
    className={cn(
      "h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0",
      className
    )}
    {...props}
  />
))
TableHead.displayName = "TableHead"

const TableCell = React.forwardRef<
  HTMLTableCellElement,
  React.TdHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, ref) => (
  <td
    ref={ref}
    className={cn("p-4 align-middle [&:has([role=checkbox])]:pr-0", className)}
    {...props}
  />
))
TableCell.displayName = "TableCell"

const TableCaption = React.forwardRef<
  HTMLTableCaptionElement,
  React.HTMLAttributes<HTMLTableCaptionElement>
>(({ className, ...props }, ref) => (
  <caption
    ref={ref}
    className={cn("mt-4 text-sm text-muted-foreground", className)}
    {...props}
  />
))
TableCaption.displayName = "TableCaption"

export {
  Table,
  TableHeader,
  TableBody,
  TableFooter,
  TableHead,
  TableRow,
  TableCell,
  TableCaption,
}
# ======================================================================================
# FIM DO ARQUIVO: src/components/ui/table.tsx
# ======================================================================================


# ======================================================================================
# INÍCIO DO ARQUIVO: src/components/ui/tabs.tsx
# ======================================================================================
"use client"

import * as React from "react"
import * as TabsPrimitive from "@radix-ui/react-tabs"

import { cn } from "@/lib/utils"

const Tabs = TabsPrimitive.Root

const TabsList = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.List
    ref={ref}
    className={cn(
      "inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground",
      className
    )}
    {...props}
  />
))
TabsList.displayName = TabsPrimitive.List.displayName

const TabsTrigger = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Trigger
    ref={ref}
    className={cn(
      "inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm",
      className
    )}
    {...props}
  />
))
TabsTrigger.displayName = TabsPrimitive.Trigger.displayName

const TabsContent = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Content
    ref={ref}
    className={cn(
      "mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2",
      className
    )}
    {...props}
  />
))
TabsContent.displayName = TabsPrimitive.Content.displayName

export { Tabs, TabsList, TabsTrigger, TabsContent }
# ======================================================================================
# FIM DO ARQUIVO: src/components/ui/tabs.tsx
# ======================================================================================


# ======================================================================================
# INÍCIO DO ARQUIVO: src/components/ui/textarea.tsx
# ======================================================================================
import * as React from 'react';

import {cn} from '@/lib/utils';

const Textarea = React.forwardRef<HTMLTextAreaElement, React.ComponentProps<'textarea'>>(
  ({className, ...props}, ref) => {
    return (
      <textarea
        className={cn(
          'flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm',
          className
        )}
        ref={ref}
        {...props}
      />
    );
  }
);
Textarea.displayName = 'Textarea';

export {Textarea};
# ======================================================================================
# FIM DO ARQUIVO: src/components/ui/textarea.tsx
# ======================================================================================


# ======================================================================================
# INÍCIO DO ARQUIVO: src/components/ui/toast.tsx
# ======================================================================================
"use client"

import * as React from "react"
import * as ToastPrimitives from "@radix-ui/react-toast"
import { cva, type VariantProps } from "class-variance-authority"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const ToastProvider = ToastPrimitives.Provider

const ToastViewport = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Viewport>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Viewport
    ref={ref}
    className={cn(
      "fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]",
      className
    )}
    {...props}
  />
))
ToastViewport.displayName = ToastPrimitives.Viewport.displayName

const toastVariants = cva(
  "group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full",
  {
    variants: {
      variant: {
        default: "border bg-background text-foreground",
        destructive:
          "destructive group border-destructive bg-destructive text-destructive-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

const Toast = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &
    VariantProps<typeof toastVariants>
>(({ className, variant, ...props }, ref) => {
  return (
    <ToastPrimitives.Root
      ref={ref}
      className={cn(toastVariants({ variant }), className)}
      {...props}
    />
  )
})
Toast.displayName = ToastPrimitives.Root.displayName

const ToastAction = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Action>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Action
    ref={ref}
    className={cn(
      "inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive",
      className
    )}
    {...props}
  />
))
ToastAction.displayName = ToastPrimitives.Action.displayName

const ToastClose = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Close>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Close
    ref={ref}
    className={cn(
      "absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600",
      className
    )}
    toast-close=""
    {...props}
  >
    <X className="h-4 w-4" />
  </ToastPrimitives.Close>
))
ToastClose.displayName = ToastPrimitives.Close.displayName

const ToastTitle = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Title>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Title
    ref={ref}
    className={cn("text-sm font-semibold", className)}
    {...props}
  />
))
ToastTitle.displayName = ToastPrimitives.Title.displayName

const ToastDescription = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Description>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Description
    ref={ref}
    className={cn("text-sm opacity-90", className)}
    {...props}
  />
))
ToastDescription.displayName = ToastPrimitives.Description.displayName

type ToastProps = React.ComponentPropsWithoutRef<typeof Toast>

type ToastActionElement = React.ReactElement<typeof ToastAction>

export {
  type ToastProps,
  type ToastActionElement,
  ToastProvider,
  ToastViewport,
  Toast,
  ToastTitle,
  ToastDescription,
  ToastClose,
  ToastAction,
}
# ======================================================================================
# FIM DO ARQUIVO: src/components/ui/toast.tsx
# ======================================================================================


# ======================================================================================
# INÍCIO DO ARQUIVO: src/components/ui/toaster.tsx
# ======================================================================================
"use client"

import { useToast } from "@/hooks/use-toast"
import {
  Toast,
  ToastClose,
  ToastDescription,
  ToastProvider,
  ToastTitle,
  ToastViewport,
} from "@/components/ui/toast"

export function Toaster() {
  const { toasts } = useToast()

  return (
    <ToastProvider>
      {toasts.map(function ({ id, title, description, action, ...props }) {
        return (
          <Toast key={id} {...props}>
            <div className="grid gap-1">
              {title && <ToastTitle>{title}</ToastTitle>}
              {description && (
                <ToastDescription>{description}</ToastDescription>
              )}
            </div>
            {action}
            <ToastClose />
          </Toast>
        )
      })}
      <ToastViewport />
    </ToastProvider>
  )
}
# ======================================================================================
# FIM DO ARQUIVO: src/components/ui/toaster.tsx
# ======================================================================================


# ======================================================================================
# INÍCIO DO ARQUIVO: src/components/ui/tooltip.tsx
# ======================================================================================
"use client"

import * as React from "react"
import * as TooltipPrimitive from "@radix-ui/react-tooltip"

import { cn } from "@/lib/utils"

const TooltipProvider = TooltipPrimitive.Provider

const Tooltip = TooltipPrimitive.Root

const TooltipTrigger = TooltipPrimitive.Trigger

const TooltipContent = React.forwardRef<
  React.ElementRef<typeof TooltipPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <TooltipPrimitive.Content
    ref={ref}
    sideOffset={sideOffset}
    className={cn(
      "z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
TooltipContent.displayName = TooltipPrimitive.Content.displayName

export { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }
# ======================================================================================
# FIM DO ARQUIVO: src/components/ui/tooltip.tsx
# ======================================================================================


# ======================================================================================
# INÍCIO DO ARQUIVO: src/hooks/use-app-store.ts
# ======================================================================================
"use client";

import { create } from 'zustand';
import { CartItem } from '@/lib/types';

interface AppState {
  cart: CartItem[];
  searchTerm: string;
  isCartOpen: boolean;
  addToCart: (itemToAdd: CartItem) => void;
  removeFromCart: (itemId: string) => void;
  updateQuantity: (itemId: string, quantity: number) => void;
  clearCart: () => void;
  setSearchTerm: (term: string) => void;
  toggleCart: () => void;
}

export const useAppStore = create<AppState>((set, get) => ({
  cart: [],
  searchTerm: '',
  isCartOpen: false,
  
  addToCart: (itemToAdd) => {
    const cart = get().cart;
    const existingItem = cart.find(item => item.id === itemToAdd.id);
    
    if (existingItem) {
      set(state => ({
        cart: state.cart.map(item =>
          item.id === itemToAdd.id
            ? { ...item, quantity: item.quantity + (itemToAdd.quantity || 1) }
            : item
        ),
      }));
    } else {
      set(state => ({
        cart: [...state.cart, { ...itemToAdd, quantity: itemToAdd.quantity || 1 }],
      }));
    }
  },
  
  removeFromCart: (itemId) => {
    set(state => ({
      cart: state.cart.filter(item => item.id !== itemId),
    }));
  },
  
  updateQuantity: (itemId, quantity) => {
    if (quantity <= 0) {
      get().removeFromCart(itemId);
    } else {
      set(state => ({
        cart: state.cart.map(item =>
          item.id === itemId ? { ...item, quantity } : item
        ),
      }));
    }
  },
  
  clearCart: () => set({ cart: [] }),
  
  setSearchTerm: (term) => set({ searchTerm: term }),
  
  toggleCart: () => set(state => ({ isCartOpen: !state.isCartOpen })),
}));
# ======================================================================================
# FIM DO ARQUIVO: src/hooks/use-app-store.ts
# ======================================================================================


# ======================================================================================
# INÍCIO DO ARQUIVO: src/hooks/use-toast.ts
# ======================================================================================
"use client"

// Inspired by react-hot-toast library
import * as React from "react"

import type {
  ToastActionElement,
  ToastProps,
} from "@/components/ui/toast"

const TOAST_LIMIT = 1
const TOAST_REMOVE_DELAY = 1000000

type ToasterToast = ToastProps & {
  id: string
  title?: React.ReactNode
  description?: React.ReactNode
  action?: ToastActionElement
}

const actionTypes = {
  ADD_TOAST: "ADD_TOAST",
  UPDATE_TOAST: "UPDATE_TOAST",
  DISMISS_TOAST: "DISMISS_TOAST",
  REMOVE_TOAST: "REMOVE_TOAST",
} as const

let count = 0

function genId() {
  count = (count + 1) % Number.MAX_SAFE_INTEGER
  return count.toString()
}

type ActionType = typeof actionTypes

type Action =
  | {
      type: ActionType["ADD_TOAST"]
      toast: ToasterToast
    }
  | {
      type: ActionType["UPDATE_TOAST"]
      toast: Partial<ToasterToast>
    }
  | {
      type: ActionType["DISMISS_TOAST"]
      toastId?: ToasterToast["id"]
    }
  | {
      type: ActionType["REMOVE_TOAST"]
      toastId?: ToasterToast["id"]
    }

interface State {
  toasts: ToasterToast[]
}

const toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()

const addToRemoveQueue = (toastId: string) => {
  if (toastTimeouts.has(toastId)) {
    return
  }

  const timeout = setTimeout(() => {
    toastTimeouts.delete(toastId)
    dispatch({
      type: "REMOVE_TOAST",
      toastId: toastId,
    })
  }, TOAST_REMOVE_DELAY)

  toastTimeouts.set(toastId, timeout)
}

export const reducer = (state: State, action: Action): State => {
  switch (action.type) {
    case "ADD_TOAST":
      return {
        ...state,
        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),
      }

    case "UPDATE_TOAST":
      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === action.toast.id ? { ...t, ...action.toast } : t
        ),
      }

    case "DISMISS_TOAST": {
      const { toastId } = action

      // ! Side effects ! - This could be extracted into a dismissToast() action,
      // but I'll keep it here for simplicity
      if (toastId) {
        addToRemoveQueue(toastId)
      } else {
        state.toasts.forEach((toast) => {
          addToRemoveQueue(toast.id)
        })
      }

      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === toastId || toastId === undefined
            ? {
                ...t,
                open: false,
              }
            : t
        ),
      }
    }
    case "REMOVE_TOAST":
      if (action.toastId === undefined) {
        return {
          ...state,
          toasts: [],
        }
      }
      return {
        ...state,
        toasts: state.toasts.filter((t) => t.id !== action.toastId),
      }
  }
}

const listeners: Array<(state: State) => void> = []

let memoryState: State = { toasts: [] }

function dispatch(action: Action) {
  memoryState = reducer(memoryState, action)
  listeners.forEach((listener) => {
    listener(memoryState)
  })
}

type Toast = Omit<ToasterToast, "id">

function toast({ ...props }: Toast) {
  const id = genId()

  const update = (props: ToasterToast) =>
    dispatch({
      type: "UPDATE_TOAST",
      toast: { ...props, id },
    })
  const dismiss = () => dispatch({ type: "DISMISS_TOAST", toastId: id })

  dispatch({
    type: "ADD_TOAST",
    toast: {
      ...props,
      id,
      open: true,
      onOpenChange: (open) => {
        if (!open) dismiss()
      },
    },
  })

  return {
    id: id,
    dismiss,
    update,
  }
}

function useToast() {
  const [state, setState] = React.useState<State>(memoryState)

  React.useEffect(() => {
    listeners.push(setState)
    return () => {
      const index = listeners.indexOf(setState)
      if (index > -1) {
        listeners.splice(index, 1)
      }
    }
  }, [state])

  return {
    ...state,
    toast,
    dismiss: (toastId?: string) => dispatch({ type: "DISMISS_TOAST", toastId }),
  }
}

export { useToast, toast }
# ======================================================================================
# FIM DO ARQUIVO: src/hooks/use-toast.ts
# ======================================================================================


# ======================================================================================
# INÍCIO DO ARQUIVO: src/lib/products.ts
# ======================================================================================
import type { AnyProduct } from './types';

export const products: AnyProduct[] = [
  // Impressos
  {
    id: 'cv-fosco-verniz',
    name: 'Cartão de Visita - Couché Fosco 300g c/ Verniz',
    description: 'Laminação Fosca e Verniz Localizado (frente e verso).',
    category: 'Impressos',
    imageUrl: 'https://www.maxcolor.com.br/uploads/produtos/detalhadas/cartao-de-visita-48x88cm-couche-300g-laminacao-fosca-e-verniz-localizado19661873926508787ee70ba.jpg',
    aiHint: 'business card',
    details: { size: '88x48mm' },
    options: [
      { label: '100 unidades', price: 171.98 },
      { label: '500 unidades', price: 177.98 },
      { label: '1.000 unidades', price: 215.98 },
      { label: '5.000 unidades', price: 947.98 },
      { label: '10.000 unidades', price: 1841.98 },
      { label: '20.000 unidades', price: 3603.98 },
    ],
  },
  {
    id: 'cv-4x0',
    name: 'Cartão de Visita - Couché 300g (4x0)',
    description: 'Impressão colorida na frente, sem enobrecimento.',
    category: 'Impressos',
    imageUrl: 'https://wbl.blob.core.windows.net/cdn/135/500-cartao-de-visita-88x48mm-em-couche-brilho-250g-4x0-verniz-total-brilho-frente-e-verso-refile-670037.png',
    aiHint: 'simple card',
    details: { size: '88x48mm' },
    options: [
        { label: '50 unidades', price: 65.98 },
        { label: '100 unidades', price: 75.98 },
        { label: '200 unidades', price: 87.98 },
        { label: '300 unidades', price: 105.98 },
        { label: '500 unidades', price: 151.98 },
        { label: '1.000 unidades', price: 155.98 },
        { label: '5.000 unidades', price: 641.98 },
        { label: '10.000 unidades', price: 1225.98 },
        { label: '20.000 unidades', price: 2367.98 },
    ],
  },
  {
    id: 'cv-4x4',
    name: 'Cartão de Visita - Couché 300g (4x4)',
    description: 'Impressão colorida frente e verso, sem enobrecimento.',
    category: 'Impressos',
    imageUrl: 'https://wbl.blob.core.windows.net/cdn/135/100-cartao-de-visita-88x48mm-em-couche-300g-4x4-sem-enobrecimento-refile-672196.png',
    aiHint: 'double-sided card',
    details: { size: '88x48mm' },
    options: [
        { label: '50 unidades', price: 73.98 },
        { label: '100 unidades', price: 91.98 },
        { label: '200 unidades', price: 115.98 },
        { label: '300 unidades', price: 141.98 },
        { label: '400 unidades', price: 173.98 },
        { label: '500 unidades', price: 153.98 },
        { label: '1.000 unidades', price: 157.98 },
        { label: '5.000 unidades', price: 651.98 },
        { label: '10.000 unidades', price: 1245.98 },
        { label: '20.000 unidades', price: 2405.98 },
    ],
  },
  {
    id: 'cv-brilho-4x0',
    name: 'Cartão de Visita - Couché Brilho 250g (4x0)',
    description: 'Verniz Total Brilho na frente.',
    category: 'Impressos',
    imageUrl: 'https://wbl.blob.core.windows.net/cdn/135/500-cartao-de-visita-88x48mm-em-couche-brilho-250g-4x0-verniz-total-brilho-frente-refile-669961.png',
    aiHint: 'glossy card',
    details: { size: '88x48mm' },
    options: [
        { label: '100 unidades', price: 81.98 },
        { label: '500 unidades', price: 83.98 },
        { label: '1.000 unidades', price: 111.98 },
        { label: '2.000 unidades', price: 197.98 },
        { label: '3.000 unidades', price: 281.98 },
        { label: '4.000 unidades', price: 365.98 },
        { label: '5.000 unidades', price: 445.98 },
        { label: '10.000 unidades', price: 853.98 },
        { label: '20.000 unidades', price: 1659.98 },
    ],
  },
  {
    id: 'cv-brilho-4x4',
    name: 'Cartão de Visita - Couché Brilho 250g (4x4)',
    description: 'Verniz Total Brilho frente e verso.',
    category: 'Impressos',
    imageUrl: 'https://wbl.blob.core.windows.net/cdn/135/500-cartao-de-visita-88x48mm-em-couche-brilho-250g-4x4-verniz-total-brilho-frente-refile-670018.png',
    aiHint: 'glossy card',
    details: { size: '88x48mm' },
    options: [
        { label: '500 unidades', price: 105.98 },
        { label: '1.000 unidades', price: 127.98 },
        { label: '3.000 unidades', price: 329.98 },
        { label: '4.000 unidades', price: 431.98 },
        { label: '5.000 unidades', price: 527.98 },
        { label: '10.000 unidades', price: 1019.98 },
        { label: '20.000 unidades', price: 1995.98 },
    ],
  },
  {
    id: 'folheto-4x0',
    name: 'Folheto - Couché Brilho 90g (4x0)',
    description: 'Impressão colorida na frente.',
    category: 'Impressos',
    imageUrl: 'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSBCy_AbsJKTQojJWipYKc9oMmUlyge1EwKqw&s',
    aiHint: 'flyer design',
    details: { size: '100x140mm' },
    options: [
        { label: '1.000 unidades', price: 193.98 },
        { label: '2.500 unidades', price: 271.98 },
        { label: '5.000 unidades', price: 411.98 },
        { label: '10.000 unidades', price: 735.98 },
        { label: '20.000 unidades', price: 1425.98 },
        { label: '30.000 unidades', price: 2115.98 },
        { label: '50.000 unidades', price: 3483.98 },
    ],
  },
  {
    id: 'folheto-4x4',
    name: 'Folheto - Couché Brilho 90g (4x4)',
    description: 'Impressão colorida frente e verso.',
    category: 'Impressos',
    imageUrl: 'https://wbl.blob.core.windows.net/cdn/135/25-folheto-100x148mm-em-couche-brilho-115g-4x0-sem-enobrecimento-refile-153224.png',
    aiHint: 'double-sided flyer',
    details: { size: '100x140mm' },
    options: [
        { label: '1.000 unidades', price: 223.98 },
        { label: '2.500 unidades', price: 299.98 },
        { label: '5.000 unidades', price: 467.98 },
        { label: '10.000 unidades', price: 815.98 },
        { label: '20.000 unidades', price: 1585.98 },
        { label: '30.000 unidades', price: 2357.98 },
        { label: '50.000 unidades', price: 3887.98 },
    ],
  },
  // Adesivos e Rótulos
  {
    id: 'adesivo-impresso',
    name: 'Adesivo Impresso',
    description: 'Adesivo com impressão digital de alta qualidade para diversas aplicações.',
    category: 'Adesivos e Rótulos',
    imageUrl: 'https://www.loneiro.com.br/wp-content/uploads/Impressao-Qualidade-Lona-Loneiro-Outdoor-impressora-PVC-Frontlit-Flex-Banner-440gsm-13oz-300D500D-1812-para-impressao-poster-propaganda-interno-externo-2.jpg',
    aiHint: 'custom sticker',
    customization: {
        type: 'area',
        pricePerM2: 100.00,
        fields: [
            { name: 'height', label: 'Altura (cm)', type: 'number' },
            { name: 'width', label: 'Largura (cm)', type: 'number' },
            { name: 'quantity', label: 'Quantidade', type: 'number' },
        ],
    },
  },
  {
    id: 'adesivo-impresso-laminado',
    name: 'Adesivo Impresso com Laminação Protetora',
    description: 'Adesivo com impressão digital e camada de proteção transparente para maior durabilidade.',
    category: 'Adesivos e Rótulos',
    imageUrl: 'https://a.imagem.app/BrQaMT.jpeg',
    aiHint: 'laminated sticker',
    customization: {
        type: 'area',
        pricePerM2: 150.00,
        fields: [
            { name: 'height', label: 'Altura (cm)', type: 'number' },
            { name: 'width', label: 'Largura (cm)', type: 'number' },
            { name: 'quantity', label: 'Quantidade', type: 'number' },
        ],
    },
  },
  {
    id: 'adesivo-recorte',
    name: 'Adesivo Recorte Eletrônico',
    description: 'Adesivo em cor única recortado eletronicamente no formato desejado.',
    category: 'Adesivos e Rótulos',
    imageUrl: 'https://www.manuelitos.com.br/wp-content/uploads/2022/10/Adesivos-recorte.jpg',
    aiHint: 'vinyl decal',
    customization: {
        type: 'area',
        pricePerM2: 80.00,
        fields: [
            { name: 'height', label: 'Altura (cm)', type: 'number' },
            { name: 'width', label: 'Largura (cm)', type: 'number' },
            { name: 'quantity', label: 'Quantidade', type: 'number' },
            { name: 'color', label: 'Cor do Adesivo', type: 'select', options: ['Branco', 'Preto', 'Vermelho', 'Azul', 'Verde', 'Amarelo', 'Prata', 'Ouro'] },
        ],
    },
  },
  {
    id: 'adesivo-impresso-recorte',
    name: 'Adesivo Impressão Digital + Recorte Eletrônico',
    description: 'Adesivo com impressão digital e recorte eletrônico no formato desejado.',
    category: 'Adesivos e Rótulos',
    imageUrl: 'https://www.revendampg.com.br/uploads/produtos/mini/adesivo-com-recorte-branco-menor-ou-igual-a-3cm-brilho-4x0-193-164580177410958694956218f12eef695.png',
    aiHint: 'custom sticker',
    customization: {
        type: 'area',
        pricePerM2: 120.00,
        fields: [
            { name: 'height', label: 'Altura (cm)', type: 'number' },
            { name: 'width', label: 'Largura (cm)', type: 'number' },
            { name: 'quantity', label: 'Quantidade', type: 'number' },
        ],
    },
  },
  {
    id: 'dtf-uv-a4',
    name: 'Cartela DTF UV - Tamanho A4',
    description: 'Cartelas DTF UV com Verniz, ideais para aplicação em diversas superfícies rígidas.',
    category: 'Adesivos e Rótulos',
    imageUrl: 'https://www.infinityplace.com.br/uploads/produtos/dtf-uv-cartela-dtf-uv-a4-210x297mm-em-dtf-uv-vinil-impressao-colorida-personalizado-com-a-sua-arte-e-173040132014379536536723d428f0860.png',
    aiHint: 'dtf transfer',
    details: { size: '210x297mm' },
    options: [
      { label: '1 unidade', price: 93.98 },
      { label: '10 unidades', price: 505.98 },
      { label: '20 unidades', price: 945.98 },
      { label: '50 unidades', price: 2249.98 },
    ],
  },
  {
    id: 'dtf-uv-a3',
    name: 'Cartela DTF UV - Tamanho A3',
    description: 'Cartelas DTF UV com Verniz, ideais para aplicação em diversas superfícies rígidas.',
    category: 'Adesivos e Rótulos',
    imageUrl: 'https://wbl.blob.core.windows.net/cdn/135/1-cartela-dtf-uv-a3-420x297mm-em-dtf-uv-5x0-impressao-dtf-uv-com-verniz-entregue-em-folha-342903.jpg',
    aiHint: 'dtf transfer',
    details: { size: '420x297mm' },
    options: [
      { label: '1 unidade', price: 107.98 },
      { label: '10 unidades', price: 785.98 },
      { label: '20 unidades', price: 1465.98 },
      { label: '50 unidades', price: 3583.98 },
    ],
  },
  // Banners e Faixas
  {
    id: 'banner-bastao',
    name: 'Banner com Bastão',
    description: 'Banner em lona com acabamento em bastão e corda, pronto para pendurar.',
    category: 'Banners e Faixas',
    imageUrl: 'https://wbl.blob.core.windows.net/cdn/135/1-banner-900x1200mm-em-lona-brilho-340g-4x0-sem-enobrecimento-bastao-e-cordao-624162.png',
    aiHint: 'hanging banner',
    customization: {
        type: 'area',
        pricePerM2: 100.00,
        fields: [
            { name: 'height', label: 'Altura (cm)', type: 'number' },
            { name: 'width', label: 'Largura (cm)', type: 'number' },
            { name: 'quantity', label: 'Quantidade', type: 'number' },
        ],
    },
  },
    {
    id: 'faixa-madeirinhas',
    name: 'Faixa com Madeirinhas',
    description: 'Faixa em lona com acabamento em madeirinhas laterais para fixação.',
    category: 'Banners e Faixas',
    imageUrl: 'https://curvao.com.br/wp-content/uploads/2017/06/faixa-03-1.jpg',
    aiHint: 'street banner',
    customization: {
        type: 'area',
        pricePerM2: 100.00,
        fields: [
            { name: 'height', label: 'Altura (cm)', type: 'number' },
            { name: 'width', label: 'Largura (cm)', type: 'number' },
            { name: 'quantity', label: 'Quantidade', type: 'number' },
        ],
    },
  },
  {
    id: 'wb-faca-p',
    name: 'Wind Banner Faca - Tam. P',
    description: 'Completo com base para piso.',
    category: 'Banners e Faixas',
    imageUrl: 'https://cdn.awsli.com.br/2500x2500/200/200601/produto/251556312/wind-banner-personalizados-grande---250-wa8zxlaajm.png',
    aiHint: 'wind flag',
    details: { size: '65x190cm' },
    options: [
        { label: '1 unidade', price: 299.98 },
        { label: '3 unidades', price: 859.98 },
        { label: '5 unidades', price: 1419.98 },
        { label: '10 unidades', price: 2819.98 },
    ],
  },
  {
    id: 'wb-faca-m',
    name: 'Wind Banner Faca - Tam. M',
    description: 'Completo com base para piso.',
    category: 'Banners e Faixas',
    imageUrl: 'https://cdn.awsli.com.br/2500x2500/200/200601/produto/262790840/wind-banner-personalizado-grande---300-4ksw5a5xt6.png',
    aiHint: 'wind flag',
    details: { size: '65x250cm' },
    options: [
        { label: '1 unidade', price: 339.98 },
        { label: '3 unidades', price: 979.98 },
        { label: '5 unidades', price: 1619.98 },
        { label: '10 unidades', price: 3219.98 },
    ],
  },
    {
    id: 'wb-faca-g',
    name: 'Wind Banner Faca - Tam. G',
    description: 'Completo com base para piso.',
    category: 'Banners e Faixas',
    imageUrl: 'https://comunicacaoearte.com.br/wp-content/uploads/windbanner-modelos-540x400px-1.png',
    aiHint: 'wind flag',
    details: { size: '65x300cm' },
    options: [
        { label: '1 unidade', price: 379.98 },
        { label: '3 unidades', price: 1099.98 },
        { label: '5 unidades', price: 1819.98 },
        { label: '10 unidades', price: 3619.98 },
    ],
  },
  // Toldos
  {
    id: 'toldo-retratil',
    name: 'Toldo Retrátil',
    description: 'Toldo retrátil com estrutura em alumínio e lona de alta resistência.',
    category: 'Toldos',
    imageUrl: 'https://www.rbrevestimentos.com.br/wp-content/uploads/2020/09/retratil-4.jpg',
    aiHint: 'retractable awning',
    customization: {
        type: 'linear-retratil',
        fields: [
            { name: 'width', label: 'Largura (cm)', type: 'number' },
            { name: 'projection', label: 'Projeção (cm)', type: 'number' },
            { name: 'color', label: 'Cor da Lona', type: 'select', options: ['Bege', 'Cinza', 'Marrom', 'Preto'] },
        ],
    },
  },
  {
    id: 'toldo-cortina',
    name: 'Toldo Cortina',
    description: 'Toldo vertical estilo cortina, ideal para varandas e áreas externas.',
    category: 'Toldos',
    imageUrl: 'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTMvUJF8kKD2EHs45uS6HTHPvRo2JycyPUTBA&s',
    aiHint: 'outdoor blind',
    customization: {
        type: 'linear-cortina',
        fields: [
            { name: 'width', label: 'Largura (cm)', type: 'number' },
            { name: 'height', label: 'Altura (cm)', type: 'number' },
            { name: 'color', label: 'Cor da Lona', type: 'select', options: ['Bege', 'Cinza', 'Marrom', 'Preto'] },
        ],
    },
  },
  // Camisetas
  {
    id: 'camiseta-dry',
    name: 'Camiseta Dry Gola Redonda',
    description: 'Impressão Ultra HD Sublimática na frente (4x0).',
    category: 'Camisetas',
    imageUrl: 'https://wbl.blob.core.windows.net/cdn/135/1-camiseta-dry-fit-masculina-580x808mm-em-tecido-dry-fit-4x0-impressao-ultra-hd-sublimatica-tamanho-g-costura-gola-redonda-embalagem-individual-714150.png',
    aiHint: 'tshirt design',
    details: { finish: 'P, M, G, GG' },
    options: [
        { label: '1 unidade', price: 69.98 },
        { label: '5 unidades', price: 347.98 },
        { label: '10 unidades', price: 693.98 },
        { label: '20 unidades', price: 1383.98 },
        { label: '30 unidades', price: 2069.98 },
        { label: '40 unidades', price: 2751.98 },
        { label: '50 unidades', price: 3429.98 },
        { label: '100 unidades', price: 6839.98 },
    ],
  },
  // Placas e Sinalização
  {
    id: 'placa-ps-1mm-adesivo',
    name: 'Placa de PS 1 milímetro com Adesivo Personalizado',
    description: 'Placa de PS com 1 milímetro de espessura, personalizada com adesivo de impressão digital de alta qualidade.',
    category: 'Placas e Sinalização',
    imageUrl: 'https://a.imagem.app/BrdeFt.jpeg',
    aiHint: 'custom sign',
    customization: {
        type: 'area',
        pricePerM2: 170.00,
        fields: [
            { name: 'height', label: 'Altura (cm)', type: 'number' },
            { name: 'width', label: 'Largura (cm)', type: 'number' },
            { name: 'quantity', label: 'Quantidade', type: 'number' },
        ],
    },
  },
  {
    id: 'placa-sinalizacao-ps',
    name: 'Placa de Sinalização PS 1 milímetro',
    description: 'Placa de sinalização em PS com 1 milímetro de espessura.',
    category: 'Placas e Sinalização',
    imageUrl: 'https://a.imagem.app/BrRgT9.jpeg',
    aiHint: 'signage board',
    options: [
        { label: 'Tamanho A4 (21x29.7cm)', price: 20.00 },
        { label: 'Tamanho A3 (29.7x42cm)', price: 39.90 },
    ],
    customization: {
        type: 'quantity',
        pricePerUnit: 1, // Placeholder, a lógica do card usará o preço da opção
        fields: [
             { name: 'quantity', label: 'Quantidade', type: 'number' },
        ]
    }
  },
];
# ======================================================================================
# FIM DO ARQUIVO: src/lib/products.ts
# ======================================================================================


# ======================================================================================
# INÍCIO DO ARQUIVO: src/lib/types.ts
# ======================================================================================
export type ProductOption = {
  label: string;
  price: number;
};

export type Product = {
  id: string;
  name: string;
  description: string;
  category: string;
  imageUrl: string;
  options: ProductOption[];
  customization?: undefined;
  aiHint?: string;
  details?: { size?: string; finish?: string };
};

type CustomizationFieldType = 'number' | 'select';

type CustomizationFieldName = 'height' | 'width' | 'projection' | 'quantity' | 'color';

type CustomizationField = {
  name: CustomizationFieldName;
  label: string;
  type: CustomizationFieldType;
  options?: string[];
};

type CustomizationType = 'area' | 'linear-retratil' | 'linear-cortina' | 'quantity';

export type CustomProduct = {
  id: string;
  name: string;
  description: string;
  category: string;
  imageUrl?: string;
  options?: ProductOption[];
  customization: {
    type: CustomizationType;
    pricePerM2?: number;
    pricePerUnit?: number;
    fields: CustomizationField[];
  };
  aiHint?: string;
};

export type AnyProduct = Product | CustomProduct;

export interface CartItem {
  id: string;
  name: string;
  price: number;
  quantity: number;
  description: string;
  imageUrl?: string;
  isCustom: boolean;
}
# ======================================================================================
# FIM DO ARQUIVO: src/lib/types.ts
# ======================================================================================


# ======================================================================================
# INÍCIO DO ARQUIVO: src/lib/utils.ts
# ======================================================================================
import { clsx, type ClassValue } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}
# ======================================================================================
# FIM DO ARQUIVO: src/lib/utils.ts
# ======================================================================================


# ======================================================================================
# INÍCIO DO ARQUIVO: tailwind.config.ts
# ======================================================================================
import type {Config} from 'tailwindcss';

const config = {
  darkMode: ['class'],
  content: [
    './pages/**/*.{ts,tsx}',
    './components/**/*.{ts,tsx}',
    './app/**/*.{ts,tsx}',
    './src/**/*.{ts,tsx}',
	],
  prefix: "",
  theme: {
    container: {
      center: true,
      padding: "2rem",
      screens: {
        "2xl": "1400px",
      },
    },
    extend: {
      fontFamily: {
        body: ['"PT Sans"', 'sans-serif'],
        headline: ['"Playfair Display"', 'serif'],
        code: ['monospace'],
      },
      colors: {
        border: "hsl(var(--border))",
        input: "hsl(var(--input))",
        ring: "hsl(var(--ring))",
        background: "hsl(var(--background))",
        foreground: "hsl(var(--foreground))",
        primary: {
          DEFAULT: "hsl(var(--primary))",
          foreground: "hsl(var(--primary-foreground))",
        },
        secondary: {
          DEFAULT: "hsl(var(--secondary))",
          foreground: "hsl(var(--secondary-foreground))",
        },
        destructive: {
          DEFAULT: "hsl(var(--destructive))",
          foreground: "hsl(var(--destructive-foreground))",
        },
        muted: {
          DEFAULT: "hsl(var(--muted))",
          foreground: "hsl(var(--muted-foreground))",
        },
        accent: {
          DEFAULT: "hsl(var(--accent))",
          foreground: "hsl(var(--accent-foreground))",
        },
        popover: {
          DEFAULT: "hsl(var(--popover))",
          foreground: "hsl(var(--popover-foreground))",
        },
        card: {
          DEFAULT: "hsl(var(--card))",
          foreground: "hsl(var(--card-foreground))",
        },
        chart: {
          '1': 'hsl(var(--chart-1))',
          '2': 'hsl(var(--chart-2))',
          '3': 'hsl(var(--chart-3))',
          '4': 'hsl(var(--chart-4))',
          '5': 'hsl(var(--chart-5))',
        },
      },
      borderRadius: {
        lg: "var(--radius)",
        md: "calc(var(--radius) - 2px)",
        sm: "calc(var(--radius) - 4px)",
      },
      keyframes: {
        "accordion-down": {
          from: { height: "0" },
          to: { height: "var(--radix-accordion-content-height)" },
        },
        "accordion-up": {
          from: { height: "var(--radix-accordion-content-height)" },
          to: { height: "0" },
        },
      },
      animation: {
        "accordion-down": "accordion-down 0.2s ease-out",
        "accordion-up": "accordion-up 0.2s ease-out",
      },
    },
  },
  plugins: [require("tailwindcss-animate")],
} satisfies Config

export default config;
# ======================================================================================
# FIM DO ARQUIVO: tailwind.config.ts
# ======================================================================================


# ======================================================================================
# INÍCIO DO ARQUIVO: tsconfig.json
# ======================================================================================
{
  "compilerOptions": {
    "target": "ES2017",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}
# ======================================================================================
# FIM DO ARQUIVO: tsconfig.json
# ======================================================================================
